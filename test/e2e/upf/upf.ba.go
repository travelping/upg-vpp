// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              unknown
// source: input_dir/plugins/upf.api.json

// Package upf contains generated bindings for API file upf.api.
//
// Contents:
//   1 struct
//  24 messages
//
package upf

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	fib_types "git.fd.io/govpp.git/binapi/fib_types"
	_ "git.fd.io/govpp.git/binapi/interface_types"
	ip_types "git.fd.io/govpp.git/binapi/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "upf"
	APIVersion = "2.0.0"
	VersionCrc = 0xab1def18
)

// UpfL7Rule defines type 'upf_l7_rule'.
type UpfL7Rule struct {
	ID          uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	RegexLength uint32 `binapi:"u32,name=regex_length" json:"-"`
	Regex       []byte `binapi:"u8[regex_length],name=regex" json:"regex,omitempty"`
}

// UpfAppAddDel defines message 'upf_app_add_del'.
type UpfAppAddDel struct {
	Name  []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	Flags uint32 `binapi:"u32,name=flags" json:"flags,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppAddDel) Reset()               { *m = UpfAppAddDel{} }
func (*UpfAppAddDel) GetMessageName() string { return "upf_app_add_del" }
func (*UpfAppAddDel) GetCrcString() string   { return "e68f6ec0" }
func (*UpfAppAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.Name
	size += 4      // m.Flags
	size += 1      // m.IsAdd
	return size
}
func (m *UpfAppAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint32(m.Flags)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.Flags = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	return nil
}

// UpfAppAddDelReply defines message 'upf_app_add_del_reply'.
type UpfAppAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppAddDelReply) Reset()               { *m = UpfAppAddDelReply{} }
func (*UpfAppAddDelReply) GetMessageName() string { return "upf_app_add_del_reply" }
func (*UpfAppAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppFlowTimeoutSet defines message 'upf_app_flow_timeout_set'.
type UpfAppFlowTimeoutSet struct {
	Type         uint8  `binapi:"u8,name=type" json:"type,omitempty"`
	DefaultValue uint16 `binapi:"u16,name=default_value" json:"default_value,omitempty"`
}

func (m *UpfAppFlowTimeoutSet) Reset()               { *m = UpfAppFlowTimeoutSet{} }
func (*UpfAppFlowTimeoutSet) GetMessageName() string { return "upf_app_flow_timeout_set" }
func (*UpfAppFlowTimeoutSet) GetCrcString() string   { return "2dac8f63" }
func (*UpfAppFlowTimeoutSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppFlowTimeoutSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Type
	size += 2 // m.DefaultValue
	return size
}
func (m *UpfAppFlowTimeoutSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Type)
	buf.EncodeUint16(m.DefaultValue)
	return buf.Bytes(), nil
}
func (m *UpfAppFlowTimeoutSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Type = buf.DecodeUint8()
	m.DefaultValue = buf.DecodeUint16()
	return nil
}

// UpfAppFlowTimeoutSetReply defines message 'upf_app_flow_timeout_set_reply'.
type UpfAppFlowTimeoutSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppFlowTimeoutSetReply) Reset()               { *m = UpfAppFlowTimeoutSetReply{} }
func (*UpfAppFlowTimeoutSetReply) GetMessageName() string { return "upf_app_flow_timeout_set_reply" }
func (*UpfAppFlowTimeoutSetReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppFlowTimeoutSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppFlowTimeoutSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppFlowTimeoutSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppFlowTimeoutSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppIPRuleAddDel defines message 'upf_app_ip_rule_add_del'.
type UpfAppIPRuleAddDel struct {
	App   []byte          `binapi:"u8[64],name=app" json:"app,omitempty"`
	ID    uint32          `binapi:"u32,name=id" json:"id,omitempty"`
	Src   ip_types.Prefix `binapi:"prefix,name=src" json:"src,omitempty"`
	Dst   ip_types.Prefix `binapi:"prefix,name=dst" json:"dst,omitempty"`
	IsAdd uint8           `binapi:"u8,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppIPRuleAddDel) Reset()               { *m = UpfAppIPRuleAddDel{} }
func (*UpfAppIPRuleAddDel) GetMessageName() string { return "upf_app_ip_rule_add_del" }
func (*UpfAppIPRuleAddDel) GetCrcString() string   { return "27e463e8" }
func (*UpfAppIPRuleAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppIPRuleAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	size += 4      // m.ID
	size += 1      // m.Src.Address.Af
	size += 1 * 16 // m.Src.Address.Un
	size += 1      // m.Src.Len
	size += 1      // m.Dst.Address.Af
	size += 1 * 16 // m.Dst.Address.Un
	size += 1      // m.Dst.Len
	size += 1      // m.IsAdd
	return size
}
func (m *UpfAppIPRuleAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(m.ID)
	buf.EncodeUint8(uint8(m.Src.Address.Af))
	buf.EncodeBytes(m.Src.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Src.Len)
	buf.EncodeUint8(uint8(m.Dst.Address.Af))
	buf.EncodeBytes(m.Dst.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Dst.Len)
	buf.EncodeUint8(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppIPRuleAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.ID = buf.DecodeUint32()
	m.Src.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Src.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Src.Len = buf.DecodeUint8()
	m.Dst.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Dst.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Dst.Len = buf.DecodeUint8()
	m.IsAdd = buf.DecodeUint8()
	return nil
}

// UpfAppIPRuleAddDelReply defines message 'upf_app_ip_rule_add_del_reply'.
type UpfAppIPRuleAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppIPRuleAddDelReply) Reset()               { *m = UpfAppIPRuleAddDelReply{} }
func (*UpfAppIPRuleAddDelReply) GetMessageName() string { return "upf_app_ip_rule_add_del_reply" }
func (*UpfAppIPRuleAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppIPRuleAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppIPRuleAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppIPRuleAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppIPRuleAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppL7RuleAddDel defines message 'upf_app_l7_rule_add_del'.
type UpfAppL7RuleAddDel struct {
	App   []byte `binapi:"u8[64],name=app" json:"app,omitempty"`
	ID    uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	Regex []byte `binapi:"u8[1024],name=regex" json:"regex,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppL7RuleAddDel) Reset()               { *m = UpfAppL7RuleAddDel{} }
func (*UpfAppL7RuleAddDel) GetMessageName() string { return "upf_app_l7_rule_add_del" }
func (*UpfAppL7RuleAddDel) GetCrcString() string   { return "5efde0a7" }
func (*UpfAppL7RuleAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppL7RuleAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64   // m.App
	size += 4        // m.ID
	size += 1 * 1024 // m.Regex
	size += 1        // m.IsAdd
	return size
}
func (m *UpfAppL7RuleAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(m.ID)
	buf.EncodeBytes(m.Regex, 1024)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppL7RuleAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.ID = buf.DecodeUint32()
	m.Regex = make([]byte, 1024)
	copy(m.Regex, buf.DecodeBytes(len(m.Regex)))
	m.IsAdd = buf.DecodeBool()
	return nil
}

// UpfAppL7RuleAddDelReply defines message 'upf_app_l7_rule_add_del_reply'.
type UpfAppL7RuleAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppL7RuleAddDelReply) Reset()               { *m = UpfAppL7RuleAddDelReply{} }
func (*UpfAppL7RuleAddDelReply) GetMessageName() string { return "upf_app_l7_rule_add_del_reply" }
func (*UpfAppL7RuleAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppL7RuleAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppL7RuleAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppL7RuleAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppL7RuleAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfApplicationL7RuleDetails defines message 'upf_application_l7_rule_details'.
type UpfApplicationL7RuleDetails struct {
	ID    uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	Regex []byte `binapi:"u8[1024],name=regex" json:"regex,omitempty"`
}

func (m *UpfApplicationL7RuleDetails) Reset()               { *m = UpfApplicationL7RuleDetails{} }
func (*UpfApplicationL7RuleDetails) GetMessageName() string { return "upf_application_l7_rule_details" }
func (*UpfApplicationL7RuleDetails) GetCrcString() string   { return "5df24e1f" }
func (*UpfApplicationL7RuleDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfApplicationL7RuleDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4        // m.ID
	size += 1 * 1024 // m.Regex
	return size
}
func (m *UpfApplicationL7RuleDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ID)
	buf.EncodeBytes(m.Regex, 1024)
	return buf.Bytes(), nil
}
func (m *UpfApplicationL7RuleDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ID = buf.DecodeUint32()
	m.Regex = make([]byte, 1024)
	copy(m.Regex, buf.DecodeBytes(len(m.Regex)))
	return nil
}

// UpfApplicationL7RuleDump defines message 'upf_application_l7_rule_dump'.
type UpfApplicationL7RuleDump struct {
	App []byte `binapi:"u8[64],name=app" json:"app,omitempty"`
}

func (m *UpfApplicationL7RuleDump) Reset()               { *m = UpfApplicationL7RuleDump{} }
func (*UpfApplicationL7RuleDump) GetMessageName() string { return "upf_application_l7_rule_dump" }
func (*UpfApplicationL7RuleDump) GetCrcString() string   { return "0b99fe11" }
func (*UpfApplicationL7RuleDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfApplicationL7RuleDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	return size
}
func (m *UpfApplicationL7RuleDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	return buf.Bytes(), nil
}
func (m *UpfApplicationL7RuleDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	return nil
}

// UpfApplicationsDetails defines message 'upf_applications_details'.
type UpfApplicationsDetails struct {
	Name  []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	Flags uint32 `binapi:"u32,name=flags" json:"flags,omitempty"`
}

func (m *UpfApplicationsDetails) Reset()               { *m = UpfApplicationsDetails{} }
func (*UpfApplicationsDetails) GetMessageName() string { return "upf_applications_details" }
func (*UpfApplicationsDetails) GetCrcString() string   { return "72cd4b5d" }
func (*UpfApplicationsDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfApplicationsDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.Name
	size += 4      // m.Flags
	return size
}
func (m *UpfApplicationsDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint32(m.Flags)
	return buf.Bytes(), nil
}
func (m *UpfApplicationsDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.Flags = buf.DecodeUint32()
	return nil
}

// UpfApplicationsDump defines message 'upf_applications_dump'.
type UpfApplicationsDump struct{}

func (m *UpfApplicationsDump) Reset()               { *m = UpfApplicationsDump{} }
func (*UpfApplicationsDump) GetMessageName() string { return "upf_applications_dump" }
func (*UpfApplicationsDump) GetCrcString() string   { return "51077d14" }
func (*UpfApplicationsDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfApplicationsDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfApplicationsDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfApplicationsDump) Unmarshal(b []byte) error {
	return nil
}

// UpfNatPoolDetails defines message 'upf_nat_pool_details'.
type UpfNatPoolDetails struct {
	Name         []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	Nwi          []byte `binapi:"u8[64],name=nwi" json:"nwi,omitempty"`
	BlockSize    uint16 `binapi:"u16,name=block_size" json:"block_size,omitempty"`
	MaxUsers     uint32 `binapi:"u32,name=max_users" json:"max_users,omitempty"`
	CurrentUsers uint32 `binapi:"u32,name=current_users" json:"current_users,omitempty"`
}

func (m *UpfNatPoolDetails) Reset()               { *m = UpfNatPoolDetails{} }
func (*UpfNatPoolDetails) GetMessageName() string { return "upf_nat_pool_details" }
func (*UpfNatPoolDetails) GetCrcString() string   { return "ea35be4d" }
func (*UpfNatPoolDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfNatPoolDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.Name
	size += 1 * 64 // m.Nwi
	size += 2      // m.BlockSize
	size += 4      // m.MaxUsers
	size += 4      // m.CurrentUsers
	return size
}
func (m *UpfNatPoolDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeBytes(m.Nwi, 64)
	buf.EncodeUint16(m.BlockSize)
	buf.EncodeUint32(m.MaxUsers)
	buf.EncodeUint32(m.CurrentUsers)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.Nwi = make([]byte, 64)
	copy(m.Nwi, buf.DecodeBytes(len(m.Nwi)))
	m.BlockSize = buf.DecodeUint16()
	m.MaxUsers = buf.DecodeUint32()
	m.CurrentUsers = buf.DecodeUint32()
	return nil
}

// UpfNatPoolDump defines message 'upf_nat_pool_dump'.
type UpfNatPoolDump struct{}

func (m *UpfNatPoolDump) Reset()               { *m = UpfNatPoolDump{} }
func (*UpfNatPoolDump) GetMessageName() string { return "upf_nat_pool_dump" }
func (*UpfNatPoolDump) GetCrcString() string   { return "51077d14" }
func (*UpfNatPoolDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNatPoolDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfNatPoolDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolDump) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpFormat defines message 'upf_pfcp_format'.
type UpfPfcpFormat struct {
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpFormat) Reset()               { *m = UpfPfcpFormat{} }
func (*UpfPfcpFormat) GetMessageName() string { return "upf_pfcp_format" }
func (*UpfPfcpFormat) GetCrcString() string   { return "d522d6e1" }
func (*UpfPfcpFormat) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpFormat) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpFormat) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpFormat) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPfcpFormatReply defines message 'upf_pfcp_format_reply'.
type UpfPfcpFormatReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	TextLen uint32 `binapi:"u32,name=text_len" json:"-"`
	Text    []byte `binapi:"u8[text_len],name=text" json:"text,omitempty"`
}

func (m *UpfPfcpFormatReply) Reset()               { *m = UpfPfcpFormatReply{} }
func (*UpfPfcpFormatReply) GetMessageName() string { return "upf_pfcp_format_reply" }
func (*UpfPfcpFormatReply) GetCrcString() string   { return "8706f872" }
func (*UpfPfcpFormatReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpFormatReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.Retval
	size += 4               // m.TextLen
	size += 1 * len(m.Text) // m.Text
	return size
}
func (m *UpfPfcpFormatReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Text)))
	buf.EncodeBytes(m.Text, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpFormatReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.TextLen = buf.DecodeUint32()
	m.Text = make([]byte, m.TextLen)
	copy(m.Text, buf.DecodeBytes(len(m.Text)))
	return nil
}

// UpfPfcpReencode defines message 'upf_pfcp_reencode'.
type UpfPfcpReencode struct {
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpReencode) Reset()               { *m = UpfPfcpReencode{} }
func (*UpfPfcpReencode) GetMessageName() string { return "upf_pfcp_reencode" }
func (*UpfPfcpReencode) GetCrcString() string   { return "d522d6e1" }
func (*UpfPfcpReencode) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpReencode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpReencode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpReencode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPfcpReencodeReply defines message 'upf_pfcp_reencode_reply'.
type UpfPfcpReencodeReply struct {
	Retval    int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpReencodeReply) Reset()               { *m = UpfPfcpReencodeReply{} }
func (*UpfPfcpReencodeReply) GetMessageName() string { return "upf_pfcp_reencode_reply" }
func (*UpfPfcpReencodeReply) GetCrcString() string   { return "68800422" }
func (*UpfPfcpReencodeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpReencodeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.Retval
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpReencodeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpReencodeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPolicyAddDel defines message 'upf_policy_add_del'.
type UpfPolicyAddDel struct {
	Action     uint8               `binapi:"u8,name=action" json:"action,omitempty"`
	Identifier string              `binapi:"string[64],name=identifier" json:"identifier,omitempty"`
	NPaths     uint8               `binapi:"u8,name=n_paths" json:"-"`
	Paths      []fib_types.FibPath `binapi:"fib_path[n_paths],name=paths" json:"paths,omitempty"`
}

func (m *UpfPolicyAddDel) Reset()               { *m = UpfPolicyAddDel{} }
func (*UpfPolicyAddDel) GetMessageName() string { return "upf_policy_add_del" }
func (*UpfPolicyAddDel) GetCrcString() string   { return "b84d515c" }
func (*UpfPolicyAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1  // m.Action
	size += 64 // m.Identifier
	size += 1  // m.NPaths
	for j1 := 0; j1 < len(m.Paths); j1++ {
		var s1 fib_types.FibPath
		_ = s1
		if j1 < len(m.Paths) {
			s1 = m.Paths[j1]
		}
		size += 4      // s1.SwIfIndex
		size += 4      // s1.TableID
		size += 4      // s1.RpfID
		size += 1      // s1.Weight
		size += 1      // s1.Preference
		size += 4      // s1.Type
		size += 4      // s1.Flags
		size += 4      // s1.Proto
		size += 1 * 16 // s1.Nh.Address
		size += 4      // s1.Nh.ViaLabel
		size += 4      // s1.Nh.ObjID
		size += 4      // s1.Nh.ClassifyTableIndex
		size += 1      // s1.NLabels
		for j2 := 0; j2 < 16; j2++ {
			size += 1 // s1.LabelStack[j2].IsUniform
			size += 4 // s1.LabelStack[j2].Label
			size += 1 // s1.LabelStack[j2].TTL
			size += 1 // s1.LabelStack[j2].Exp
		}
	}
	return size
}
func (m *UpfPolicyAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Action)
	buf.EncodeString(m.Identifier, 64)
	buf.EncodeUint8(uint8(len(m.Paths)))
	for j0 := 0; j0 < len(m.Paths); j0++ {
		var v0 fib_types.FibPath // Paths
		if j0 < len(m.Paths) {
			v0 = m.Paths[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint32(v0.TableID)
		buf.EncodeUint32(v0.RpfID)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeUint8(v0.Preference)
		buf.EncodeUint32(uint32(v0.Type))
		buf.EncodeUint32(uint32(v0.Flags))
		buf.EncodeUint32(uint32(v0.Proto))
		buf.EncodeBytes(v0.Nh.Address.XXX_UnionData[:], 16)
		buf.EncodeUint32(v0.Nh.ViaLabel)
		buf.EncodeUint32(v0.Nh.ObjID)
		buf.EncodeUint32(v0.Nh.ClassifyTableIndex)
		buf.EncodeUint8(v0.NLabels)
		for j1 := 0; j1 < 16; j1++ {
			buf.EncodeUint8(v0.LabelStack[j1].IsUniform)
			buf.EncodeUint32(v0.LabelStack[j1].Label)
			buf.EncodeUint8(v0.LabelStack[j1].TTL)
			buf.EncodeUint8(v0.LabelStack[j1].Exp)
		}
	}
	return buf.Bytes(), nil
}
func (m *UpfPolicyAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Action = buf.DecodeUint8()
	m.Identifier = buf.DecodeString(64)
	m.NPaths = buf.DecodeUint8()
	m.Paths = make([]fib_types.FibPath, m.NPaths)
	for j0 := 0; j0 < len(m.Paths); j0++ {
		m.Paths[j0].SwIfIndex = buf.DecodeUint32()
		m.Paths[j0].TableID = buf.DecodeUint32()
		m.Paths[j0].RpfID = buf.DecodeUint32()
		m.Paths[j0].Weight = buf.DecodeUint8()
		m.Paths[j0].Preference = buf.DecodeUint8()
		m.Paths[j0].Type = fib_types.FibPathType(buf.DecodeUint32())
		m.Paths[j0].Flags = fib_types.FibPathFlags(buf.DecodeUint32())
		m.Paths[j0].Proto = fib_types.FibPathNhProto(buf.DecodeUint32())
		copy(m.Paths[j0].Nh.Address.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Paths[j0].Nh.ViaLabel = buf.DecodeUint32()
		m.Paths[j0].Nh.ObjID = buf.DecodeUint32()
		m.Paths[j0].Nh.ClassifyTableIndex = buf.DecodeUint32()
		m.Paths[j0].NLabels = buf.DecodeUint8()
		for j1 := 0; j1 < 16; j1++ {
			m.Paths[j0].LabelStack[j1].IsUniform = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Label = buf.DecodeUint32()
			m.Paths[j0].LabelStack[j1].TTL = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Exp = buf.DecodeUint8()
		}
	}
	return nil
}

// UpfPolicyAddDelReply defines message 'upf_policy_add_del_reply'.
type UpfPolicyAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPolicyAddDelReply) Reset()               { *m = UpfPolicyAddDelReply{} }
func (*UpfPolicyAddDelReply) GetMessageName() string { return "upf_policy_add_del_reply" }
func (*UpfPolicyAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPolicyAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPolicyAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPolicyAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPolicyAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPolicyDetails defines message 'upf_policy_details'.
type UpfPolicyDetails struct {
	Identifier string              `binapi:"string[64],name=identifier" json:"identifier,omitempty"`
	NPaths     uint8               `binapi:"u8,name=n_paths" json:"-"`
	Paths      []fib_types.FibPath `binapi:"fib_path[n_paths],name=paths" json:"paths,omitempty"`
}

func (m *UpfPolicyDetails) Reset()               { *m = UpfPolicyDetails{} }
func (*UpfPolicyDetails) GetMessageName() string { return "upf_policy_details" }
func (*UpfPolicyDetails) GetCrcString() string   { return "8b4efe84" }
func (*UpfPolicyDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Identifier
	size += 1  // m.NPaths
	for j1 := 0; j1 < len(m.Paths); j1++ {
		var s1 fib_types.FibPath
		_ = s1
		if j1 < len(m.Paths) {
			s1 = m.Paths[j1]
		}
		size += 4      // s1.SwIfIndex
		size += 4      // s1.TableID
		size += 4      // s1.RpfID
		size += 1      // s1.Weight
		size += 1      // s1.Preference
		size += 4      // s1.Type
		size += 4      // s1.Flags
		size += 4      // s1.Proto
		size += 1 * 16 // s1.Nh.Address
		size += 4      // s1.Nh.ViaLabel
		size += 4      // s1.Nh.ObjID
		size += 4      // s1.Nh.ClassifyTableIndex
		size += 1      // s1.NLabels
		for j2 := 0; j2 < 16; j2++ {
			size += 1 // s1.LabelStack[j2].IsUniform
			size += 4 // s1.LabelStack[j2].Label
			size += 1 // s1.LabelStack[j2].TTL
			size += 1 // s1.LabelStack[j2].Exp
		}
	}
	return size
}
func (m *UpfPolicyDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Identifier, 64)
	buf.EncodeUint8(uint8(len(m.Paths)))
	for j0 := 0; j0 < len(m.Paths); j0++ {
		var v0 fib_types.FibPath // Paths
		if j0 < len(m.Paths) {
			v0 = m.Paths[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint32(v0.TableID)
		buf.EncodeUint32(v0.RpfID)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeUint8(v0.Preference)
		buf.EncodeUint32(uint32(v0.Type))
		buf.EncodeUint32(uint32(v0.Flags))
		buf.EncodeUint32(uint32(v0.Proto))
		buf.EncodeBytes(v0.Nh.Address.XXX_UnionData[:], 16)
		buf.EncodeUint32(v0.Nh.ViaLabel)
		buf.EncodeUint32(v0.Nh.ObjID)
		buf.EncodeUint32(v0.Nh.ClassifyTableIndex)
		buf.EncodeUint8(v0.NLabels)
		for j1 := 0; j1 < 16; j1++ {
			buf.EncodeUint8(v0.LabelStack[j1].IsUniform)
			buf.EncodeUint32(v0.LabelStack[j1].Label)
			buf.EncodeUint8(v0.LabelStack[j1].TTL)
			buf.EncodeUint8(v0.LabelStack[j1].Exp)
		}
	}
	return buf.Bytes(), nil
}
func (m *UpfPolicyDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Identifier = buf.DecodeString(64)
	m.NPaths = buf.DecodeUint8()
	m.Paths = make([]fib_types.FibPath, m.NPaths)
	for j0 := 0; j0 < len(m.Paths); j0++ {
		m.Paths[j0].SwIfIndex = buf.DecodeUint32()
		m.Paths[j0].TableID = buf.DecodeUint32()
		m.Paths[j0].RpfID = buf.DecodeUint32()
		m.Paths[j0].Weight = buf.DecodeUint8()
		m.Paths[j0].Preference = buf.DecodeUint8()
		m.Paths[j0].Type = fib_types.FibPathType(buf.DecodeUint32())
		m.Paths[j0].Flags = fib_types.FibPathFlags(buf.DecodeUint32())
		m.Paths[j0].Proto = fib_types.FibPathNhProto(buf.DecodeUint32())
		copy(m.Paths[j0].Nh.Address.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Paths[j0].Nh.ViaLabel = buf.DecodeUint32()
		m.Paths[j0].Nh.ObjID = buf.DecodeUint32()
		m.Paths[j0].Nh.ClassifyTableIndex = buf.DecodeUint32()
		m.Paths[j0].NLabels = buf.DecodeUint8()
		for j1 := 0; j1 < 16; j1++ {
			m.Paths[j0].LabelStack[j1].IsUniform = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Label = buf.DecodeUint32()
			m.Paths[j0].LabelStack[j1].TTL = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Exp = buf.DecodeUint8()
		}
	}
	return nil
}

// UpfPolicyDump defines message 'upf_policy_dump'.
type UpfPolicyDump struct{}

func (m *UpfPolicyDump) Reset()               { *m = UpfPolicyDump{} }
func (*UpfPolicyDump) GetMessageName() string { return "upf_policy_dump" }
func (*UpfPolicyDump) GetCrcString() string   { return "51077d14" }
func (*UpfPolicyDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPolicyDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPolicyDump) Unmarshal(b []byte) error {
	return nil
}

// UpfUpdateApp defines message 'upf_update_app'.
type UpfUpdateApp struct {
	App         []byte      `binapi:"u8[64],name=app" json:"app,omitempty"`
	L7RuleCount uint32      `binapi:"u32,name=l7_rule_count" json:"-"`
	L7Rules     []UpfL7Rule `binapi:"upf_l7_rule[l7_rule_count],name=l7_rules" json:"l7_rules,omitempty"`
}

func (m *UpfUpdateApp) Reset()               { *m = UpfUpdateApp{} }
func (*UpfUpdateApp) GetMessageName() string { return "upf_update_app" }
func (*UpfUpdateApp) GetCrcString() string   { return "50f53737" }
func (*UpfUpdateApp) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfUpdateApp) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	size += 4      // m.L7RuleCount
	for j1 := 0; j1 < len(m.L7Rules); j1++ {
		var s1 UpfL7Rule
		_ = s1
		if j1 < len(m.L7Rules) {
			s1 = m.L7Rules[j1]
		}
		size += 4                 // s1.ID
		size += 4                 // s1.RegexLength
		size += 1 * len(s1.Regex) // s1.Regex
	}
	return size
}
func (m *UpfUpdateApp) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(uint32(len(m.L7Rules)))
	for j0 := 0; j0 < len(m.L7Rules); j0++ {
		var v0 UpfL7Rule // L7Rules
		if j0 < len(m.L7Rules) {
			v0 = m.L7Rules[j0]
		}
		buf.EncodeUint32(v0.ID)
		buf.EncodeUint32(uint32(len(v0.Regex)))
		buf.EncodeBytes(v0.Regex, 0)
	}
	return buf.Bytes(), nil
}
func (m *UpfUpdateApp) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.L7RuleCount = buf.DecodeUint32()
	m.L7Rules = make([]UpfL7Rule, m.L7RuleCount)
	for j0 := 0; j0 < len(m.L7Rules); j0++ {
		m.L7Rules[j0].ID = buf.DecodeUint32()
		m.L7Rules[j0].RegexLength = buf.DecodeUint32()
		m.L7Rules[j0].Regex = make([]byte, m.L7Rules[j0].RegexLength)
		copy(m.L7Rules[j0].Regex, buf.DecodeBytes(len(m.L7Rules[j0].Regex)))
	}
	return nil
}

// UpfUpdateAppReply defines message 'upf_update_app_reply'.
type UpfUpdateAppReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfUpdateAppReply) Reset()               { *m = UpfUpdateAppReply{} }
func (*UpfUpdateAppReply) GetMessageName() string { return "upf_update_app_reply" }
func (*UpfUpdateAppReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfUpdateAppReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfUpdateAppReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfUpdateAppReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfUpdateAppReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_upf_binapi_init() }
func file_upf_binapi_init() {
	api.RegisterMessage((*UpfAppAddDel)(nil), "upf_app_add_del_e68f6ec0")
	api.RegisterMessage((*UpfAppAddDelReply)(nil), "upf_app_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfAppFlowTimeoutSet)(nil), "upf_app_flow_timeout_set_2dac8f63")
	api.RegisterMessage((*UpfAppFlowTimeoutSetReply)(nil), "upf_app_flow_timeout_set_reply_e8d4e804")
	api.RegisterMessage((*UpfAppIPRuleAddDel)(nil), "upf_app_ip_rule_add_del_27e463e8")
	api.RegisterMessage((*UpfAppIPRuleAddDelReply)(nil), "upf_app_ip_rule_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfAppL7RuleAddDel)(nil), "upf_app_l7_rule_add_del_5efde0a7")
	api.RegisterMessage((*UpfAppL7RuleAddDelReply)(nil), "upf_app_l7_rule_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfApplicationL7RuleDetails)(nil), "upf_application_l7_rule_details_5df24e1f")
	api.RegisterMessage((*UpfApplicationL7RuleDump)(nil), "upf_application_l7_rule_dump_0b99fe11")
	api.RegisterMessage((*UpfApplicationsDetails)(nil), "upf_applications_details_72cd4b5d")
	api.RegisterMessage((*UpfApplicationsDump)(nil), "upf_applications_dump_51077d14")
	api.RegisterMessage((*UpfNatPoolDetails)(nil), "upf_nat_pool_details_ea35be4d")
	api.RegisterMessage((*UpfNatPoolDump)(nil), "upf_nat_pool_dump_51077d14")
	api.RegisterMessage((*UpfPfcpFormat)(nil), "upf_pfcp_format_d522d6e1")
	api.RegisterMessage((*UpfPfcpFormatReply)(nil), "upf_pfcp_format_reply_8706f872")
	api.RegisterMessage((*UpfPfcpReencode)(nil), "upf_pfcp_reencode_d522d6e1")
	api.RegisterMessage((*UpfPfcpReencodeReply)(nil), "upf_pfcp_reencode_reply_68800422")
	api.RegisterMessage((*UpfPolicyAddDel)(nil), "upf_policy_add_del_b84d515c")
	api.RegisterMessage((*UpfPolicyAddDelReply)(nil), "upf_policy_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfPolicyDetails)(nil), "upf_policy_details_8b4efe84")
	api.RegisterMessage((*UpfPolicyDump)(nil), "upf_policy_dump_51077d14")
	api.RegisterMessage((*UpfUpdateApp)(nil), "upf_update_app_50f53737")
	api.RegisterMessage((*UpfUpdateAppReply)(nil), "upf_update_app_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*UpfAppAddDel)(nil),
		(*UpfAppAddDelReply)(nil),
		(*UpfAppFlowTimeoutSet)(nil),
		(*UpfAppFlowTimeoutSetReply)(nil),
		(*UpfAppIPRuleAddDel)(nil),
		(*UpfAppIPRuleAddDelReply)(nil),
		(*UpfAppL7RuleAddDel)(nil),
		(*UpfAppL7RuleAddDelReply)(nil),
		(*UpfApplicationL7RuleDetails)(nil),
		(*UpfApplicationL7RuleDump)(nil),
		(*UpfApplicationsDetails)(nil),
		(*UpfApplicationsDump)(nil),
		(*UpfNatPoolDetails)(nil),
		(*UpfNatPoolDump)(nil),
		(*UpfPfcpFormat)(nil),
		(*UpfPfcpFormatReply)(nil),
		(*UpfPfcpReencode)(nil),
		(*UpfPfcpReencodeReply)(nil),
		(*UpfPolicyAddDel)(nil),
		(*UpfPolicyAddDelReply)(nil),
		(*UpfPolicyDetails)(nil),
		(*UpfPolicyDump)(nil),
		(*UpfUpdateApp)(nil),
		(*UpfUpdateAppReply)(nil),
	}
}
