// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package upf contains generated bindings for API file upf.api.
//
// Contents:
//   3 enums
//   1 struct
//  60 messages
//
package upf

import (
	"strconv"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	fib_types "github.com/travelping/upg-vpp/test/e2e/binapi/fib_types"
	interface_types "github.com/travelping/upg-vpp/test/e2e/binapi/interface_types"
	ip_types "github.com/travelping/upg-vpp/test/e2e/binapi/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "upf"
	APIVersion = "2.0.0"
	VersionCrc = 0x37ca18c2
)

// UpfIpfixRecordFlags defines enum 'upf_ipfix_record_flags'.
type UpfIpfixRecordFlags uint8

const (
	UPF_IPFIX_RECORD_FLAG_L3 UpfIpfixRecordFlags = 1
	UPF_IPFIX_RECORD_FLAG_L4 UpfIpfixRecordFlags = 2
)

var (
	UpfIpfixRecordFlags_name = map[uint8]string{
		1: "UPF_IPFIX_RECORD_FLAG_L3",
		2: "UPF_IPFIX_RECORD_FLAG_L4",
	}
	UpfIpfixRecordFlags_value = map[string]uint8{
		"UPF_IPFIX_RECORD_FLAG_L3": 1,
		"UPF_IPFIX_RECORD_FLAG_L4": 2,
	}
)

func (x UpfIpfixRecordFlags) String() string {
	s, ok := UpfIpfixRecordFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := UpfIpfixRecordFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "UpfIpfixRecordFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// UpfIpfixWhichFlags defines enum 'upf_ipfix_which_flags'.
type UpfIpfixWhichFlags uint8

const (
	UPF_IPFIX_WHICH_FLAG_IP4 UpfIpfixWhichFlags = 1
	UPF_IPFIX_WHICH_FLAG_IP6 UpfIpfixWhichFlags = 2
)

var (
	UpfIpfixWhichFlags_name = map[uint8]string{
		1: "UPF_IPFIX_WHICH_FLAG_IP4",
		2: "UPF_IPFIX_WHICH_FLAG_IP6",
	}
	UpfIpfixWhichFlags_value = map[string]uint8{
		"UPF_IPFIX_WHICH_FLAG_IP4": 1,
		"UPF_IPFIX_WHICH_FLAG_IP6": 2,
	}
)

func (x UpfIpfixWhichFlags) String() string {
	s, ok := UpfIpfixWhichFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := UpfIpfixWhichFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "UpfIpfixWhichFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// UpfNodeIDType defines enum 'upf_node_id_type'.
type UpfNodeIDType uint8

const (
	UPF_NODE_TYPE_IPv4 UpfNodeIDType = 0
	UPF_NODE_TYPE_IPv6 UpfNodeIDType = 1
	UPF_NODE_TYPE_FQDN UpfNodeIDType = 2
)

var (
	UpfNodeIDType_name = map[uint8]string{
		0: "UPF_NODE_TYPE_IPv4",
		1: "UPF_NODE_TYPE_IPv6",
		2: "UPF_NODE_TYPE_FQDN",
	}
	UpfNodeIDType_value = map[string]uint8{
		"UPF_NODE_TYPE_IPv4": 0,
		"UPF_NODE_TYPE_IPv6": 1,
		"UPF_NODE_TYPE_FQDN": 2,
	}
)

func (x UpfNodeIDType) String() string {
	s, ok := UpfNodeIDType_name[uint8(x)]
	if ok {
		return s
	}
	return "UpfNodeIDType(" + strconv.Itoa(int(x)) + ")"
}

// UpfL7Rule defines type 'upf_l7_rule'.
type UpfL7Rule struct {
	ID          uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	RegexLength uint32 `binapi:"u32,name=regex_length" json:"-"`
	Regex       []byte `binapi:"u8[regex_length],name=regex" json:"regex,omitempty"`
}

// UpfAppAddDel defines message 'upf_app_add_del'.
type UpfAppAddDel struct {
	Name  []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	Flags uint32 `binapi:"u32,name=flags" json:"flags,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppAddDel) Reset()               { *m = UpfAppAddDel{} }
func (*UpfAppAddDel) GetMessageName() string { return "upf_app_add_del" }
func (*UpfAppAddDel) GetCrcString() string   { return "e68f6ec0" }
func (*UpfAppAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.Name
	size += 4      // m.Flags
	size += 1      // m.IsAdd
	return size
}
func (m *UpfAppAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint32(m.Flags)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.Flags = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	return nil
}

// UpfAppAddDelReply defines message 'upf_app_add_del_reply'.
type UpfAppAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppAddDelReply) Reset()               { *m = UpfAppAddDelReply{} }
func (*UpfAppAddDelReply) GetMessageName() string { return "upf_app_add_del_reply" }
func (*UpfAppAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppFlowTimeoutSet defines message 'upf_app_flow_timeout_set'.
type UpfAppFlowTimeoutSet struct {
	Type         uint8  `binapi:"u8,name=type" json:"type,omitempty"`
	DefaultValue uint16 `binapi:"u16,name=default_value" json:"default_value,omitempty"`
}

func (m *UpfAppFlowTimeoutSet) Reset()               { *m = UpfAppFlowTimeoutSet{} }
func (*UpfAppFlowTimeoutSet) GetMessageName() string { return "upf_app_flow_timeout_set" }
func (*UpfAppFlowTimeoutSet) GetCrcString() string   { return "2dac8f63" }
func (*UpfAppFlowTimeoutSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppFlowTimeoutSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Type
	size += 2 // m.DefaultValue
	return size
}
func (m *UpfAppFlowTimeoutSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Type)
	buf.EncodeUint16(m.DefaultValue)
	return buf.Bytes(), nil
}
func (m *UpfAppFlowTimeoutSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Type = buf.DecodeUint8()
	m.DefaultValue = buf.DecodeUint16()
	return nil
}

// UpfAppFlowTimeoutSetReply defines message 'upf_app_flow_timeout_set_reply'.
type UpfAppFlowTimeoutSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppFlowTimeoutSetReply) Reset()               { *m = UpfAppFlowTimeoutSetReply{} }
func (*UpfAppFlowTimeoutSetReply) GetMessageName() string { return "upf_app_flow_timeout_set_reply" }
func (*UpfAppFlowTimeoutSetReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppFlowTimeoutSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppFlowTimeoutSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppFlowTimeoutSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppFlowTimeoutSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppIPRuleAddDel defines message 'upf_app_ip_rule_add_del'.
type UpfAppIPRuleAddDel struct {
	App   []byte          `binapi:"u8[64],name=app" json:"app,omitempty"`
	ID    uint32          `binapi:"u32,name=id" json:"id,omitempty"`
	Src   ip_types.Prefix `binapi:"prefix,name=src" json:"src,omitempty"`
	Dst   ip_types.Prefix `binapi:"prefix,name=dst" json:"dst,omitempty"`
	IsAdd uint8           `binapi:"u8,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppIPRuleAddDel) Reset()               { *m = UpfAppIPRuleAddDel{} }
func (*UpfAppIPRuleAddDel) GetMessageName() string { return "upf_app_ip_rule_add_del" }
func (*UpfAppIPRuleAddDel) GetCrcString() string   { return "27e463e8" }
func (*UpfAppIPRuleAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppIPRuleAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	size += 4      // m.ID
	size += 1      // m.Src.Address.Af
	size += 1 * 16 // m.Src.Address.Un
	size += 1      // m.Src.Len
	size += 1      // m.Dst.Address.Af
	size += 1 * 16 // m.Dst.Address.Un
	size += 1      // m.Dst.Len
	size += 1      // m.IsAdd
	return size
}
func (m *UpfAppIPRuleAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(m.ID)
	buf.EncodeUint8(uint8(m.Src.Address.Af))
	buf.EncodeBytes(m.Src.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Src.Len)
	buf.EncodeUint8(uint8(m.Dst.Address.Af))
	buf.EncodeBytes(m.Dst.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Dst.Len)
	buf.EncodeUint8(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppIPRuleAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.ID = buf.DecodeUint32()
	m.Src.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Src.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Src.Len = buf.DecodeUint8()
	m.Dst.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Dst.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Dst.Len = buf.DecodeUint8()
	m.IsAdd = buf.DecodeUint8()
	return nil
}

// UpfAppIPRuleAddDelReply defines message 'upf_app_ip_rule_add_del_reply'.
type UpfAppIPRuleAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppIPRuleAddDelReply) Reset()               { *m = UpfAppIPRuleAddDelReply{} }
func (*UpfAppIPRuleAddDelReply) GetMessageName() string { return "upf_app_ip_rule_add_del_reply" }
func (*UpfAppIPRuleAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppIPRuleAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppIPRuleAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppIPRuleAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppIPRuleAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfAppL7RuleAddDel defines message 'upf_app_l7_rule_add_del'.
type UpfAppL7RuleAddDel struct {
	App   []byte `binapi:"u8[64],name=app" json:"app,omitempty"`
	ID    uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	Regex []byte `binapi:"u8[1024],name=regex" json:"regex,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *UpfAppL7RuleAddDel) Reset()               { *m = UpfAppL7RuleAddDel{} }
func (*UpfAppL7RuleAddDel) GetMessageName() string { return "upf_app_l7_rule_add_del" }
func (*UpfAppL7RuleAddDel) GetCrcString() string   { return "5efde0a7" }
func (*UpfAppL7RuleAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfAppL7RuleAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64   // m.App
	size += 4        // m.ID
	size += 1 * 1024 // m.Regex
	size += 1        // m.IsAdd
	return size
}
func (m *UpfAppL7RuleAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(m.ID)
	buf.EncodeBytes(m.Regex, 1024)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *UpfAppL7RuleAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.ID = buf.DecodeUint32()
	m.Regex = make([]byte, 1024)
	copy(m.Regex, buf.DecodeBytes(len(m.Regex)))
	m.IsAdd = buf.DecodeBool()
	return nil
}

// UpfAppL7RuleAddDelReply defines message 'upf_app_l7_rule_add_del_reply'.
type UpfAppL7RuleAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfAppL7RuleAddDelReply) Reset()               { *m = UpfAppL7RuleAddDelReply{} }
func (*UpfAppL7RuleAddDelReply) GetMessageName() string { return "upf_app_l7_rule_add_del_reply" }
func (*UpfAppL7RuleAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfAppL7RuleAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfAppL7RuleAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfAppL7RuleAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfAppL7RuleAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfApplicationL7RuleDetails defines message 'upf_application_l7_rule_details'.
type UpfApplicationL7RuleDetails struct {
	ID    uint32 `binapi:"u32,name=id" json:"id,omitempty"`
	Regex []byte `binapi:"u8[1024],name=regex" json:"regex,omitempty"`
}

func (m *UpfApplicationL7RuleDetails) Reset()               { *m = UpfApplicationL7RuleDetails{} }
func (*UpfApplicationL7RuleDetails) GetMessageName() string { return "upf_application_l7_rule_details" }
func (*UpfApplicationL7RuleDetails) GetCrcString() string   { return "5df24e1f" }
func (*UpfApplicationL7RuleDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfApplicationL7RuleDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4        // m.ID
	size += 1 * 1024 // m.Regex
	return size
}
func (m *UpfApplicationL7RuleDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ID)
	buf.EncodeBytes(m.Regex, 1024)
	return buf.Bytes(), nil
}
func (m *UpfApplicationL7RuleDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ID = buf.DecodeUint32()
	m.Regex = make([]byte, 1024)
	copy(m.Regex, buf.DecodeBytes(len(m.Regex)))
	return nil
}

// UpfApplicationL7RuleDump defines message 'upf_application_l7_rule_dump'.
type UpfApplicationL7RuleDump struct {
	App []byte `binapi:"u8[64],name=app" json:"app,omitempty"`
}

func (m *UpfApplicationL7RuleDump) Reset()               { *m = UpfApplicationL7RuleDump{} }
func (*UpfApplicationL7RuleDump) GetMessageName() string { return "upf_application_l7_rule_dump" }
func (*UpfApplicationL7RuleDump) GetCrcString() string   { return "0b99fe11" }
func (*UpfApplicationL7RuleDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfApplicationL7RuleDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	return size
}
func (m *UpfApplicationL7RuleDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	return buf.Bytes(), nil
}
func (m *UpfApplicationL7RuleDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	return nil
}

// UpfApplicationsDetails defines message 'upf_applications_details'.
type UpfApplicationsDetails struct {
	Name  []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	Flags uint32 `binapi:"u32,name=flags" json:"flags,omitempty"`
}

func (m *UpfApplicationsDetails) Reset()               { *m = UpfApplicationsDetails{} }
func (*UpfApplicationsDetails) GetMessageName() string { return "upf_applications_details" }
func (*UpfApplicationsDetails) GetCrcString() string   { return "72cd4b5d" }
func (*UpfApplicationsDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfApplicationsDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.Name
	size += 4      // m.Flags
	return size
}
func (m *UpfApplicationsDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint32(m.Flags)
	return buf.Bytes(), nil
}
func (m *UpfApplicationsDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.Flags = buf.DecodeUint32()
	return nil
}

// UpfApplicationsDump defines message 'upf_applications_dump'.
type UpfApplicationsDump struct{}

func (m *UpfApplicationsDump) Reset()               { *m = UpfApplicationsDump{} }
func (*UpfApplicationsDump) GetMessageName() string { return "upf_applications_dump" }
func (*UpfApplicationsDump) GetCrcString() string   { return "51077d14" }
func (*UpfApplicationsDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfApplicationsDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfApplicationsDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfApplicationsDump) Unmarshal(b []byte) error {
	return nil
}

// UpfGetNodeID defines message 'upf_get_node_id'.
type UpfGetNodeID struct{}

func (m *UpfGetNodeID) Reset()               { *m = UpfGetNodeID{} }
func (*UpfGetNodeID) GetMessageName() string { return "upf_get_node_id" }
func (*UpfGetNodeID) GetCrcString() string   { return "51077d14" }
func (*UpfGetNodeID) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfGetNodeID) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfGetNodeID) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfGetNodeID) Unmarshal(b []byte) error {
	return nil
}

// UpfGetNodeIDReply defines message 'upf_get_node_id_reply'.
type UpfGetNodeIDReply struct {
	Retval  int32            `binapi:"i32,name=retval" json:"retval,omitempty"`
	Type    uint8            `binapi:"u8,name=type" json:"type,omitempty"`
	IP      ip_types.Address `binapi:"address,name=ip" json:"ip,omitempty"`
	FqdnLen uint8            `binapi:"u8,name=fqdn_len" json:"-"`
	Fqdn    []byte           `binapi:"u8[fqdn_len],name=fqdn" json:"fqdn,omitempty"`
}

func (m *UpfGetNodeIDReply) Reset()               { *m = UpfGetNodeIDReply{} }
func (*UpfGetNodeIDReply) GetMessageName() string { return "upf_get_node_id_reply" }
func (*UpfGetNodeIDReply) GetCrcString() string   { return "4f226741" }
func (*UpfGetNodeIDReply) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfGetNodeIDReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.Retval
	size += 1               // m.Type
	size += 1               // m.IP.Af
	size += 1 * 16          // m.IP.Un
	size += 1               // m.FqdnLen
	size += 1 * len(m.Fqdn) // m.Fqdn
	return size
}
func (m *UpfGetNodeIDReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Type)
	buf.EncodeUint8(uint8(m.IP.Af))
	buf.EncodeBytes(m.IP.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(len(m.Fqdn)))
	buf.EncodeBytes(m.Fqdn, 0)
	return buf.Bytes(), nil
}
func (m *UpfGetNodeIDReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Type = buf.DecodeUint8()
	m.IP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.FqdnLen = buf.DecodeUint8()
	m.Fqdn = make([]byte, m.FqdnLen)
	copy(m.Fqdn, buf.DecodeBytes(len(m.Fqdn)))
	return nil
}

// UpfNatPoolAdd defines message 'upf_nat_pool_add'.
type UpfNatPoolAdd struct {
	IsAdd     bool                `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	MinPort   uint16              `binapi:"u16,name=min_port" json:"min_port,omitempty"`
	MaxPort   uint16              `binapi:"u16,name=max_port" json:"max_port,omitempty"`
	BlockSize uint32              `binapi:"u32,name=block_size" json:"block_size,omitempty"`
	Start     ip_types.IP4Address `binapi:"ip4_address,name=start" json:"start,omitempty"`
	End       ip_types.IP4Address `binapi:"ip4_address,name=end" json:"end,omitempty"`
	NameLen   uint8               `binapi:"u8,name=name_len" json:"name_len,omitempty"`
	Name      []byte              `binapi:"u8[64],name=name" json:"name,omitempty"`
	NwiLen    uint8               `binapi:"u8,name=nwi_len" json:"-"`
	Nwi       []byte              `binapi:"u8[nwi_len],name=nwi" json:"nwi,omitempty"`
}

func (m *UpfNatPoolAdd) Reset()               { *m = UpfNatPoolAdd{} }
func (*UpfNatPoolAdd) GetMessageName() string { return "upf_nat_pool_add" }
func (*UpfNatPoolAdd) GetCrcString() string   { return "53c81402" }
func (*UpfNatPoolAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNatPoolAdd) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1              // m.IsAdd
	size += 2              // m.MinPort
	size += 2              // m.MaxPort
	size += 4              // m.BlockSize
	size += 1 * 4          // m.Start
	size += 1 * 4          // m.End
	size += 1              // m.NameLen
	size += 1 * 64         // m.Name
	size += 1              // m.NwiLen
	size += 1 * len(m.Nwi) // m.Nwi
	return size
}
func (m *UpfNatPoolAdd) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint16(m.MinPort)
	buf.EncodeUint16(m.MaxPort)
	buf.EncodeUint32(m.BlockSize)
	buf.EncodeBytes(m.Start[:], 4)
	buf.EncodeBytes(m.End[:], 4)
	buf.EncodeUint8(m.NameLen)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint8(uint8(len(m.Nwi)))
	buf.EncodeBytes(m.Nwi, 0)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolAdd) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.MinPort = buf.DecodeUint16()
	m.MaxPort = buf.DecodeUint16()
	m.BlockSize = buf.DecodeUint32()
	copy(m.Start[:], buf.DecodeBytes(4))
	copy(m.End[:], buf.DecodeBytes(4))
	m.NameLen = buf.DecodeUint8()
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.NwiLen = buf.DecodeUint8()
	m.Nwi = make([]byte, m.NwiLen)
	copy(m.Nwi, buf.DecodeBytes(len(m.Nwi)))
	return nil
}

// UpfNatPoolAddReply defines message 'upf_nat_pool_add_reply'.
type UpfNatPoolAddReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfNatPoolAddReply) Reset()               { *m = UpfNatPoolAddReply{} }
func (*UpfNatPoolAddReply) GetMessageName() string { return "upf_nat_pool_add_reply" }
func (*UpfNatPoolAddReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfNatPoolAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfNatPoolAddReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfNatPoolAddReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolAddReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfNatPoolDetails defines message 'upf_nat_pool_details'.
type UpfNatPoolDetails struct {
	Name         []byte `binapi:"u8[64],name=name" json:"name,omitempty"`
	BlockSize    uint16 `binapi:"u16,name=block_size" json:"block_size,omitempty"`
	MaxUsers     uint32 `binapi:"u32,name=max_users" json:"max_users,omitempty"`
	CurrentUsers uint32 `binapi:"u32,name=current_users" json:"current_users,omitempty"`
	NwiLen       uint8  `binapi:"u8,name=nwi_len" json:"-"`
	Nwi          []byte `binapi:"u8[nwi_len],name=nwi" json:"nwi,omitempty"`
}

func (m *UpfNatPoolDetails) Reset()               { *m = UpfNatPoolDetails{} }
func (*UpfNatPoolDetails) GetMessageName() string { return "upf_nat_pool_details" }
func (*UpfNatPoolDetails) GetCrcString() string   { return "536a8c46" }
func (*UpfNatPoolDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfNatPoolDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64         // m.Name
	size += 2              // m.BlockSize
	size += 4              // m.MaxUsers
	size += 4              // m.CurrentUsers
	size += 1              // m.NwiLen
	size += 1 * len(m.Nwi) // m.Nwi
	return size
}
func (m *UpfNatPoolDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Name, 64)
	buf.EncodeUint16(m.BlockSize)
	buf.EncodeUint32(m.MaxUsers)
	buf.EncodeUint32(m.CurrentUsers)
	buf.EncodeUint8(uint8(len(m.Nwi)))
	buf.EncodeBytes(m.Nwi, 0)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = make([]byte, 64)
	copy(m.Name, buf.DecodeBytes(len(m.Name)))
	m.BlockSize = buf.DecodeUint16()
	m.MaxUsers = buf.DecodeUint32()
	m.CurrentUsers = buf.DecodeUint32()
	m.NwiLen = buf.DecodeUint8()
	m.Nwi = make([]byte, m.NwiLen)
	copy(m.Nwi, buf.DecodeBytes(len(m.Nwi)))
	return nil
}

// UpfNatPoolDump defines message 'upf_nat_pool_dump'.
type UpfNatPoolDump struct{}

func (m *UpfNatPoolDump) Reset()               { *m = UpfNatPoolDump{} }
func (*UpfNatPoolDump) GetMessageName() string { return "upf_nat_pool_dump" }
func (*UpfNatPoolDump) GetCrcString() string   { return "51077d14" }
func (*UpfNatPoolDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNatPoolDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfNatPoolDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfNatPoolDump) Unmarshal(b []byte) error {
	return nil
}

// UpfNwiAddDel defines message 'upf_nwi_add_del'.
type UpfNwiAddDel struct {
	Add                   uint8            `binapi:"u8,name=add" json:"add,omitempty"`
	IP4TableID            uint32           `binapi:"u32,name=ip4_table_id" json:"ip4_table_id,omitempty"`
	IP6TableID            uint32           `binapi:"u32,name=ip6_table_id" json:"ip6_table_id,omitempty"`
	IpfixPolicy           []byte           `binapi:"u8[64],name=ipfix_policy" json:"ipfix_policy,omitempty"`
	IpfixCollectorIP      ip_types.Address `binapi:"address,name=ipfix_collector_ip" json:"ipfix_collector_ip,omitempty"`
	IpfixReportInterval   uint32           `binapi:"u32,name=ipfix_report_interval" json:"ipfix_report_interval,omitempty"`
	ObservationDomainID   uint32           `binapi:"u32,name=observation_domain_id" json:"observation_domain_id,omitempty"`
	ObservationDomainName []byte           `binapi:"u8[256],name=observation_domain_name" json:"observation_domain_name,omitempty"`
	ObservationPointID    uint64           `binapi:"u64,name=observation_point_id" json:"observation_point_id,omitempty"`
	NwiLen                uint8            `binapi:"u8,name=nwi_len" json:"-"`
	Nwi                   []byte           `binapi:"u8[nwi_len],name=nwi" json:"nwi,omitempty"`
}

func (m *UpfNwiAddDel) Reset()               { *m = UpfNwiAddDel{} }
func (*UpfNwiAddDel) GetMessageName() string { return "upf_nwi_add_del" }
func (*UpfNwiAddDel) GetCrcString() string   { return "07485c64" }
func (*UpfNwiAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNwiAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1              // m.Add
	size += 4              // m.IP4TableID
	size += 4              // m.IP6TableID
	size += 1 * 64         // m.IpfixPolicy
	size += 1              // m.IpfixCollectorIP.Af
	size += 1 * 16         // m.IpfixCollectorIP.Un
	size += 4              // m.IpfixReportInterval
	size += 4              // m.ObservationDomainID
	size += 1 * 256        // m.ObservationDomainName
	size += 8              // m.ObservationPointID
	size += 1              // m.NwiLen
	size += 1 * len(m.Nwi) // m.Nwi
	return size
}
func (m *UpfNwiAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Add)
	buf.EncodeUint32(m.IP4TableID)
	buf.EncodeUint32(m.IP6TableID)
	buf.EncodeBytes(m.IpfixPolicy, 64)
	buf.EncodeUint8(uint8(m.IpfixCollectorIP.Af))
	buf.EncodeBytes(m.IpfixCollectorIP.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(m.IpfixReportInterval)
	buf.EncodeUint32(m.ObservationDomainID)
	buf.EncodeBytes(m.ObservationDomainName, 256)
	buf.EncodeUint64(m.ObservationPointID)
	buf.EncodeUint8(uint8(len(m.Nwi)))
	buf.EncodeBytes(m.Nwi, 0)
	return buf.Bytes(), nil
}
func (m *UpfNwiAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Add = buf.DecodeUint8()
	m.IP4TableID = buf.DecodeUint32()
	m.IP6TableID = buf.DecodeUint32()
	m.IpfixPolicy = make([]byte, 64)
	copy(m.IpfixPolicy, buf.DecodeBytes(len(m.IpfixPolicy)))
	m.IpfixCollectorIP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IpfixCollectorIP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.IpfixReportInterval = buf.DecodeUint32()
	m.ObservationDomainID = buf.DecodeUint32()
	m.ObservationDomainName = make([]byte, 256)
	copy(m.ObservationDomainName, buf.DecodeBytes(len(m.ObservationDomainName)))
	m.ObservationPointID = buf.DecodeUint64()
	m.NwiLen = buf.DecodeUint8()
	m.Nwi = make([]byte, m.NwiLen)
	copy(m.Nwi, buf.DecodeBytes(len(m.Nwi)))
	return nil
}

// UpfNwiAddDelReply defines message 'upf_nwi_add_del_reply'.
type UpfNwiAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfNwiAddDelReply) Reset()               { *m = UpfNwiAddDelReply{} }
func (*UpfNwiAddDelReply) GetMessageName() string { return "upf_nwi_add_del_reply" }
func (*UpfNwiAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfNwiAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfNwiAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfNwiAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfNwiAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfNwiDetails defines message 'upf_nwi_details'.
type UpfNwiDetails struct {
	IP4TableID            uint32           `binapi:"u32,name=ip4_table_id" json:"ip4_table_id,omitempty"`
	IP6TableID            uint32           `binapi:"u32,name=ip6_table_id" json:"ip6_table_id,omitempty"`
	IpfixPolicy           []byte           `binapi:"u8[64],name=ipfix_policy" json:"ipfix_policy,omitempty"`
	IpfixCollectorIP      ip_types.Address `binapi:"address,name=ipfix_collector_ip" json:"ipfix_collector_ip,omitempty"`
	IpfixReportInterval   uint32           `binapi:"u32,name=ipfix_report_interval" json:"ipfix_report_interval,omitempty"`
	ObservationDomainID   uint32           `binapi:"u32,name=observation_domain_id" json:"observation_domain_id,omitempty"`
	ObservationDomainName []byte           `binapi:"u8[256],name=observation_domain_name" json:"observation_domain_name,omitempty"`
	ObservationPointID    uint64           `binapi:"u64,name=observation_point_id" json:"observation_point_id,omitempty"`
	NwiLen                uint8            `binapi:"u8,name=nwi_len" json:"-"`
	Nwi                   []byte           `binapi:"u8[nwi_len],name=nwi" json:"nwi,omitempty"`
}

func (m *UpfNwiDetails) Reset()               { *m = UpfNwiDetails{} }
func (*UpfNwiDetails) GetMessageName() string { return "upf_nwi_details" }
func (*UpfNwiDetails) GetCrcString() string   { return "31319001" }
func (*UpfNwiDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNwiDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4              // m.IP4TableID
	size += 4              // m.IP6TableID
	size += 1 * 64         // m.IpfixPolicy
	size += 1              // m.IpfixCollectorIP.Af
	size += 1 * 16         // m.IpfixCollectorIP.Un
	size += 4              // m.IpfixReportInterval
	size += 4              // m.ObservationDomainID
	size += 1 * 256        // m.ObservationDomainName
	size += 8              // m.ObservationPointID
	size += 1              // m.NwiLen
	size += 1 * len(m.Nwi) // m.Nwi
	return size
}
func (m *UpfNwiDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.IP4TableID)
	buf.EncodeUint32(m.IP6TableID)
	buf.EncodeBytes(m.IpfixPolicy, 64)
	buf.EncodeUint8(uint8(m.IpfixCollectorIP.Af))
	buf.EncodeBytes(m.IpfixCollectorIP.Un.XXX_UnionData[:], 16)
	buf.EncodeUint32(m.IpfixReportInterval)
	buf.EncodeUint32(m.ObservationDomainID)
	buf.EncodeBytes(m.ObservationDomainName, 256)
	buf.EncodeUint64(m.ObservationPointID)
	buf.EncodeUint8(uint8(len(m.Nwi)))
	buf.EncodeBytes(m.Nwi, 0)
	return buf.Bytes(), nil
}
func (m *UpfNwiDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IP4TableID = buf.DecodeUint32()
	m.IP6TableID = buf.DecodeUint32()
	m.IpfixPolicy = make([]byte, 64)
	copy(m.IpfixPolicy, buf.DecodeBytes(len(m.IpfixPolicy)))
	m.IpfixCollectorIP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IpfixCollectorIP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.IpfixReportInterval = buf.DecodeUint32()
	m.ObservationDomainID = buf.DecodeUint32()
	m.ObservationDomainName = make([]byte, 256)
	copy(m.ObservationDomainName, buf.DecodeBytes(len(m.ObservationDomainName)))
	m.ObservationPointID = buf.DecodeUint64()
	m.NwiLen = buf.DecodeUint8()
	m.Nwi = make([]byte, m.NwiLen)
	copy(m.Nwi, buf.DecodeBytes(len(m.Nwi)))
	return nil
}

// UpfNwiDump defines message 'upf_nwi_dump'.
type UpfNwiDump struct{}

func (m *UpfNwiDump) Reset()               { *m = UpfNwiDump{} }
func (*UpfNwiDump) GetMessageName() string { return "upf_nwi_dump" }
func (*UpfNwiDump) GetCrcString() string   { return "51077d14" }
func (*UpfNwiDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfNwiDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfNwiDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfNwiDump) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpEndpointAddDel defines message 'upf_pfcp_endpoint_add_del'.
type UpfPfcpEndpointAddDel struct {
	IsAdd   uint8            `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	TableID uint32           `binapi:"u32,name=table_id" json:"table_id,omitempty"`
	IP      ip_types.Address `binapi:"address,name=ip" json:"ip,omitempty"`
}

func (m *UpfPfcpEndpointAddDel) Reset()               { *m = UpfPfcpEndpointAddDel{} }
func (*UpfPfcpEndpointAddDel) GetMessageName() string { return "upf_pfcp_endpoint_add_del" }
func (*UpfPfcpEndpointAddDel) GetCrcString() string   { return "c10b6079" }
func (*UpfPfcpEndpointAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpEndpointAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 4      // m.TableID
	size += 1      // m.IP.Af
	size += 1 * 16 // m.IP.Un
	return size
}
func (m *UpfPfcpEndpointAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint32(m.TableID)
	buf.EncodeUint8(uint8(m.IP.Af))
	buf.EncodeBytes(m.IP.Un.XXX_UnionData[:], 16)
	return buf.Bytes(), nil
}
func (m *UpfPfcpEndpointAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.TableID = buf.DecodeUint32()
	m.IP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	return nil
}

// UpfPfcpEndpointAddDelReply defines message 'upf_pfcp_endpoint_add_del_reply'.
type UpfPfcpEndpointAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPfcpEndpointAddDelReply) Reset()               { *m = UpfPfcpEndpointAddDelReply{} }
func (*UpfPfcpEndpointAddDelReply) GetMessageName() string { return "upf_pfcp_endpoint_add_del_reply" }
func (*UpfPfcpEndpointAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPfcpEndpointAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpEndpointAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPfcpEndpointAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPfcpEndpointAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPfcpEndpointDetails defines message 'upf_pfcp_endpoint_details'.
type UpfPfcpEndpointDetails struct {
	TableID uint32           `binapi:"u32,name=table_id" json:"table_id,omitempty"`
	IP      ip_types.Address `binapi:"address,name=ip" json:"ip,omitempty"`
}

func (m *UpfPfcpEndpointDetails) Reset()               { *m = UpfPfcpEndpointDetails{} }
func (*UpfPfcpEndpointDetails) GetMessageName() string { return "upf_pfcp_endpoint_details" }
func (*UpfPfcpEndpointDetails) GetCrcString() string   { return "84b7ba70" }
func (*UpfPfcpEndpointDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpEndpointDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.TableID
	size += 1      // m.IP.Af
	size += 1 * 16 // m.IP.Un
	return size
}
func (m *UpfPfcpEndpointDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TableID)
	buf.EncodeUint8(uint8(m.IP.Af))
	buf.EncodeBytes(m.IP.Un.XXX_UnionData[:], 16)
	return buf.Bytes(), nil
}
func (m *UpfPfcpEndpointDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TableID = buf.DecodeUint32()
	m.IP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	return nil
}

// UpfPfcpEndpointDump defines message 'upf_pfcp_endpoint_dump'.
type UpfPfcpEndpointDump struct{}

func (m *UpfPfcpEndpointDump) Reset()               { *m = UpfPfcpEndpointDump{} }
func (*UpfPfcpEndpointDump) GetMessageName() string { return "upf_pfcp_endpoint_dump" }
func (*UpfPfcpEndpointDump) GetCrcString() string   { return "51077d14" }
func (*UpfPfcpEndpointDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpEndpointDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPfcpEndpointDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPfcpEndpointDump) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpFormat defines message 'upf_pfcp_format'.
type UpfPfcpFormat struct {
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpFormat) Reset()               { *m = UpfPfcpFormat{} }
func (*UpfPfcpFormat) GetMessageName() string { return "upf_pfcp_format" }
func (*UpfPfcpFormat) GetCrcString() string   { return "d522d6e1" }
func (*UpfPfcpFormat) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpFormat) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpFormat) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpFormat) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPfcpFormatReply defines message 'upf_pfcp_format_reply'.
type UpfPfcpFormatReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	TextLen uint32 `binapi:"u32,name=text_len" json:"-"`
	Text    []byte `binapi:"u8[text_len],name=text" json:"text,omitempty"`
}

func (m *UpfPfcpFormatReply) Reset()               { *m = UpfPfcpFormatReply{} }
func (*UpfPfcpFormatReply) GetMessageName() string { return "upf_pfcp_format_reply" }
func (*UpfPfcpFormatReply) GetCrcString() string   { return "8706f872" }
func (*UpfPfcpFormatReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpFormatReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.Retval
	size += 4               // m.TextLen
	size += 1 * len(m.Text) // m.Text
	return size
}
func (m *UpfPfcpFormatReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Text)))
	buf.EncodeBytes(m.Text, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpFormatReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.TextLen = buf.DecodeUint32()
	m.Text = make([]byte, m.TextLen)
	copy(m.Text, buf.DecodeBytes(len(m.Text)))
	return nil
}

// UpfPfcpHeartbeatsGet defines message 'upf_pfcp_heartbeats_get'.
type UpfPfcpHeartbeatsGet struct{}

func (m *UpfPfcpHeartbeatsGet) Reset()               { *m = UpfPfcpHeartbeatsGet{} }
func (*UpfPfcpHeartbeatsGet) GetMessageName() string { return "upf_pfcp_heartbeats_get" }
func (*UpfPfcpHeartbeatsGet) GetCrcString() string   { return "51077d14" }
func (*UpfPfcpHeartbeatsGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpHeartbeatsGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPfcpHeartbeatsGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPfcpHeartbeatsGet) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpHeartbeatsGetReply defines message 'upf_pfcp_heartbeats_get_reply'.
type UpfPfcpHeartbeatsGetReply struct {
	Timeout uint32 `binapi:"u32,name=timeout" json:"timeout,omitempty"`
	Retries uint32 `binapi:"u32,name=retries" json:"retries,omitempty"`
}

func (m *UpfPfcpHeartbeatsGetReply) Reset()               { *m = UpfPfcpHeartbeatsGetReply{} }
func (*UpfPfcpHeartbeatsGetReply) GetMessageName() string { return "upf_pfcp_heartbeats_get_reply" }
func (*UpfPfcpHeartbeatsGetReply) GetCrcString() string   { return "f5eafa3d" }
func (*UpfPfcpHeartbeatsGetReply) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpHeartbeatsGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Timeout
	size += 4 // m.Retries
	return size
}
func (m *UpfPfcpHeartbeatsGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Timeout)
	buf.EncodeUint32(m.Retries)
	return buf.Bytes(), nil
}
func (m *UpfPfcpHeartbeatsGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Timeout = buf.DecodeUint32()
	m.Retries = buf.DecodeUint32()
	return nil
}

// UpfPfcpHeartbeatsSet defines message 'upf_pfcp_heartbeats_set'.
type UpfPfcpHeartbeatsSet struct {
	Timeout uint32 `binapi:"u32,name=timeout" json:"timeout,omitempty"`
	Retries uint32 `binapi:"u32,name=retries" json:"retries,omitempty"`
}

func (m *UpfPfcpHeartbeatsSet) Reset()               { *m = UpfPfcpHeartbeatsSet{} }
func (*UpfPfcpHeartbeatsSet) GetMessageName() string { return "upf_pfcp_heartbeats_set" }
func (*UpfPfcpHeartbeatsSet) GetCrcString() string   { return "f5eafa3d" }
func (*UpfPfcpHeartbeatsSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpHeartbeatsSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Timeout
	size += 4 // m.Retries
	return size
}
func (m *UpfPfcpHeartbeatsSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Timeout)
	buf.EncodeUint32(m.Retries)
	return buf.Bytes(), nil
}
func (m *UpfPfcpHeartbeatsSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Timeout = buf.DecodeUint32()
	m.Retries = buf.DecodeUint32()
	return nil
}

// UpfPfcpHeartbeatsSetReply defines message 'upf_pfcp_heartbeats_set_reply'.
type UpfPfcpHeartbeatsSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPfcpHeartbeatsSetReply) Reset()               { *m = UpfPfcpHeartbeatsSetReply{} }
func (*UpfPfcpHeartbeatsSetReply) GetMessageName() string { return "upf_pfcp_heartbeats_set_reply" }
func (*UpfPfcpHeartbeatsSetReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPfcpHeartbeatsSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpHeartbeatsSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPfcpHeartbeatsSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPfcpHeartbeatsSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPfcpPolicerSet defines message 'upf_pfcp_policer_set'.
type UpfPfcpPolicerSet struct {
	CirPps uint32 `binapi:"u32,name=cir_pps" json:"cir_pps,omitempty"`
	CbMs   uint32 `binapi:"u32,name=cb_ms" json:"cb_ms,omitempty"`
}

func (m *UpfPfcpPolicerSet) Reset()               { *m = UpfPfcpPolicerSet{} }
func (*UpfPfcpPolicerSet) GetMessageName() string { return "upf_pfcp_policer_set" }
func (*UpfPfcpPolicerSet) GetCrcString() string   { return "8d0512f3" }
func (*UpfPfcpPolicerSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpPolicerSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.CirPps
	size += 4 // m.CbMs
	return size
}
func (m *UpfPfcpPolicerSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.CirPps)
	buf.EncodeUint32(m.CbMs)
	return buf.Bytes(), nil
}
func (m *UpfPfcpPolicerSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.CirPps = buf.DecodeUint32()
	m.CbMs = buf.DecodeUint32()
	return nil
}

// UpfPfcpPolicerSetReply defines message 'upf_pfcp_policer_set_reply'.
type UpfPfcpPolicerSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPfcpPolicerSetReply) Reset()               { *m = UpfPfcpPolicerSetReply{} }
func (*UpfPfcpPolicerSetReply) GetMessageName() string { return "upf_pfcp_policer_set_reply" }
func (*UpfPfcpPolicerSetReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPfcpPolicerSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpPolicerSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPfcpPolicerSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPfcpPolicerSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPfcpPolicerShow defines message 'upf_pfcp_policer_show'.
type UpfPfcpPolicerShow struct{}

func (m *UpfPfcpPolicerShow) Reset()               { *m = UpfPfcpPolicerShow{} }
func (*UpfPfcpPolicerShow) GetMessageName() string { return "upf_pfcp_policer_show" }
func (*UpfPfcpPolicerShow) GetCrcString() string   { return "51077d14" }
func (*UpfPfcpPolicerShow) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpPolicerShow) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPfcpPolicerShow) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPfcpPolicerShow) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpPolicerShowReply defines message 'upf_pfcp_policer_show_reply'.
type UpfPfcpPolicerShowReply struct {
	CirPps uint32 `binapi:"u32,name=cir_pps" json:"cir_pps,omitempty"`
	CbMs   uint32 `binapi:"u32,name=cb_ms" json:"cb_ms,omitempty"`
}

func (m *UpfPfcpPolicerShowReply) Reset()               { *m = UpfPfcpPolicerShowReply{} }
func (*UpfPfcpPolicerShowReply) GetMessageName() string { return "upf_pfcp_policer_show_reply" }
func (*UpfPfcpPolicerShowReply) GetCrcString() string   { return "8d0512f3" }
func (*UpfPfcpPolicerShowReply) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpPolicerShowReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.CirPps
	size += 4 // m.CbMs
	return size
}
func (m *UpfPfcpPolicerShowReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.CirPps)
	buf.EncodeUint32(m.CbMs)
	return buf.Bytes(), nil
}
func (m *UpfPfcpPolicerShowReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.CirPps = buf.DecodeUint32()
	m.CbMs = buf.DecodeUint32()
	return nil
}

// UpfPfcpReencode defines message 'upf_pfcp_reencode'.
type UpfPfcpReencode struct {
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpReencode) Reset()               { *m = UpfPfcpReencode{} }
func (*UpfPfcpReencode) GetMessageName() string { return "upf_pfcp_reencode" }
func (*UpfPfcpReencode) GetCrcString() string   { return "d522d6e1" }
func (*UpfPfcpReencode) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpReencode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpReencode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpReencode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPfcpReencodeReply defines message 'upf_pfcp_reencode_reply'.
type UpfPfcpReencodeReply struct {
	Retval    int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	PacketLen uint32 `binapi:"u32,name=packet_len" json:"-"`
	Packet    []byte `binapi:"u8[packet_len],name=packet" json:"packet,omitempty"`
}

func (m *UpfPfcpReencodeReply) Reset()               { *m = UpfPfcpReencodeReply{} }
func (*UpfPfcpReencodeReply) GetMessageName() string { return "upf_pfcp_reencode_reply" }
func (*UpfPfcpReencodeReply) GetCrcString() string   { return "68800422" }
func (*UpfPfcpReencodeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpReencodeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                 // m.Retval
	size += 4                 // m.PacketLen
	size += 1 * len(m.Packet) // m.Packet
	return size
}
func (m *UpfPfcpReencodeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Packet)))
	buf.EncodeBytes(m.Packet, 0)
	return buf.Bytes(), nil
}
func (m *UpfPfcpReencodeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.PacketLen = buf.DecodeUint32()
	m.Packet = make([]byte, m.PacketLen)
	copy(m.Packet, buf.DecodeBytes(len(m.Packet)))
	return nil
}

// UpfPfcpServerSet defines message 'upf_pfcp_server_set'.
type UpfPfcpServerSet struct {
	FifoSize      uint32 `binapi:"u32,name=fifo_size" json:"fifo_size,omitempty"`
	PreallocFifos uint32 `binapi:"u32,name=prealloc_fifos" json:"prealloc_fifos,omitempty"`
	SegmentSize   uint32 `binapi:"u32,name=segment_size" json:"segment_size,omitempty"`
}

func (m *UpfPfcpServerSet) Reset()               { *m = UpfPfcpServerSet{} }
func (*UpfPfcpServerSet) GetMessageName() string { return "upf_pfcp_server_set" }
func (*UpfPfcpServerSet) GetCrcString() string   { return "747f398b" }
func (*UpfPfcpServerSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpServerSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.FifoSize
	size += 4 // m.PreallocFifos
	size += 4 // m.SegmentSize
	return size
}
func (m *UpfPfcpServerSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.FifoSize)
	buf.EncodeUint32(m.PreallocFifos)
	buf.EncodeUint32(m.SegmentSize)
	return buf.Bytes(), nil
}
func (m *UpfPfcpServerSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.FifoSize = buf.DecodeUint32()
	m.PreallocFifos = buf.DecodeUint32()
	m.SegmentSize = buf.DecodeUint32()
	return nil
}

// UpfPfcpServerSetReply defines message 'upf_pfcp_server_set_reply'.
type UpfPfcpServerSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPfcpServerSetReply) Reset()               { *m = UpfPfcpServerSetReply{} }
func (*UpfPfcpServerSetReply) GetMessageName() string { return "upf_pfcp_server_set_reply" }
func (*UpfPfcpServerSetReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPfcpServerSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPfcpServerSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPfcpServerSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPfcpServerSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPfcpServerShow defines message 'upf_pfcp_server_show'.
type UpfPfcpServerShow struct{}

func (m *UpfPfcpServerShow) Reset()               { *m = UpfPfcpServerShow{} }
func (*UpfPfcpServerShow) GetMessageName() string { return "upf_pfcp_server_show" }
func (*UpfPfcpServerShow) GetCrcString() string   { return "51077d14" }
func (*UpfPfcpServerShow) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpServerShow) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPfcpServerShow) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPfcpServerShow) Unmarshal(b []byte) error {
	return nil
}

// UpfPfcpServerShowReply defines message 'upf_pfcp_server_show_reply'.
type UpfPfcpServerShowReply struct {
	FifoSize      uint32 `binapi:"u32,name=fifo_size" json:"fifo_size,omitempty"`
	PreallocFifos uint32 `binapi:"u32,name=prealloc_fifos" json:"prealloc_fifos,omitempty"`
	SegmentSize   uint32 `binapi:"u32,name=segment_size" json:"segment_size,omitempty"`
}

func (m *UpfPfcpServerShowReply) Reset()               { *m = UpfPfcpServerShowReply{} }
func (*UpfPfcpServerShowReply) GetMessageName() string { return "upf_pfcp_server_show_reply" }
func (*UpfPfcpServerShowReply) GetCrcString() string   { return "747f398b" }
func (*UpfPfcpServerShowReply) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPfcpServerShowReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.FifoSize
	size += 4 // m.PreallocFifos
	size += 4 // m.SegmentSize
	return size
}
func (m *UpfPfcpServerShowReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.FifoSize)
	buf.EncodeUint32(m.PreallocFifos)
	buf.EncodeUint32(m.SegmentSize)
	return buf.Bytes(), nil
}
func (m *UpfPfcpServerShowReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.FifoSize = buf.DecodeUint32()
	m.PreallocFifos = buf.DecodeUint32()
	m.SegmentSize = buf.DecodeUint32()
	return nil
}

// UpfPolicyAddDel defines message 'upf_policy_add_del'.
type UpfPolicyAddDel struct {
	Action     uint8               `binapi:"u8,name=action" json:"action,omitempty"`
	Identifier string              `binapi:"string[64],name=identifier" json:"identifier,omitempty"`
	NPaths     uint8               `binapi:"u8,name=n_paths" json:"-"`
	Paths      []fib_types.FibPath `binapi:"fib_path[n_paths],name=paths" json:"paths,omitempty"`
}

func (m *UpfPolicyAddDel) Reset()               { *m = UpfPolicyAddDel{} }
func (*UpfPolicyAddDel) GetMessageName() string { return "upf_policy_add_del" }
func (*UpfPolicyAddDel) GetCrcString() string   { return "b84d515c" }
func (*UpfPolicyAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1  // m.Action
	size += 64 // m.Identifier
	size += 1  // m.NPaths
	for j1 := 0; j1 < len(m.Paths); j1++ {
		var s1 fib_types.FibPath
		_ = s1
		if j1 < len(m.Paths) {
			s1 = m.Paths[j1]
		}
		size += 4      // s1.SwIfIndex
		size += 4      // s1.TableID
		size += 4      // s1.RpfID
		size += 1      // s1.Weight
		size += 1      // s1.Preference
		size += 4      // s1.Type
		size += 4      // s1.Flags
		size += 4      // s1.Proto
		size += 1 * 16 // s1.Nh.Address
		size += 4      // s1.Nh.ViaLabel
		size += 4      // s1.Nh.ObjID
		size += 4      // s1.Nh.ClassifyTableIndex
		size += 1      // s1.NLabels
		for j2 := 0; j2 < 16; j2++ {
			size += 1 // s1.LabelStack[j2].IsUniform
			size += 4 // s1.LabelStack[j2].Label
			size += 1 // s1.LabelStack[j2].TTL
			size += 1 // s1.LabelStack[j2].Exp
		}
	}
	return size
}
func (m *UpfPolicyAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Action)
	buf.EncodeString(m.Identifier, 64)
	buf.EncodeUint8(uint8(len(m.Paths)))
	for j0 := 0; j0 < len(m.Paths); j0++ {
		var v0 fib_types.FibPath // Paths
		if j0 < len(m.Paths) {
			v0 = m.Paths[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint32(v0.TableID)
		buf.EncodeUint32(v0.RpfID)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeUint8(v0.Preference)
		buf.EncodeUint32(uint32(v0.Type))
		buf.EncodeUint32(uint32(v0.Flags))
		buf.EncodeUint32(uint32(v0.Proto))
		buf.EncodeBytes(v0.Nh.Address.XXX_UnionData[:], 16)
		buf.EncodeUint32(v0.Nh.ViaLabel)
		buf.EncodeUint32(v0.Nh.ObjID)
		buf.EncodeUint32(v0.Nh.ClassifyTableIndex)
		buf.EncodeUint8(v0.NLabels)
		for j1 := 0; j1 < 16; j1++ {
			buf.EncodeUint8(v0.LabelStack[j1].IsUniform)
			buf.EncodeUint32(v0.LabelStack[j1].Label)
			buf.EncodeUint8(v0.LabelStack[j1].TTL)
			buf.EncodeUint8(v0.LabelStack[j1].Exp)
		}
	}
	return buf.Bytes(), nil
}
func (m *UpfPolicyAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Action = buf.DecodeUint8()
	m.Identifier = buf.DecodeString(64)
	m.NPaths = buf.DecodeUint8()
	m.Paths = make([]fib_types.FibPath, m.NPaths)
	for j0 := 0; j0 < len(m.Paths); j0++ {
		m.Paths[j0].SwIfIndex = buf.DecodeUint32()
		m.Paths[j0].TableID = buf.DecodeUint32()
		m.Paths[j0].RpfID = buf.DecodeUint32()
		m.Paths[j0].Weight = buf.DecodeUint8()
		m.Paths[j0].Preference = buf.DecodeUint8()
		m.Paths[j0].Type = fib_types.FibPathType(buf.DecodeUint32())
		m.Paths[j0].Flags = fib_types.FibPathFlags(buf.DecodeUint32())
		m.Paths[j0].Proto = fib_types.FibPathNhProto(buf.DecodeUint32())
		copy(m.Paths[j0].Nh.Address.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Paths[j0].Nh.ViaLabel = buf.DecodeUint32()
		m.Paths[j0].Nh.ObjID = buf.DecodeUint32()
		m.Paths[j0].Nh.ClassifyTableIndex = buf.DecodeUint32()
		m.Paths[j0].NLabels = buf.DecodeUint8()
		for j1 := 0; j1 < 16; j1++ {
			m.Paths[j0].LabelStack[j1].IsUniform = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Label = buf.DecodeUint32()
			m.Paths[j0].LabelStack[j1].TTL = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Exp = buf.DecodeUint8()
		}
	}
	return nil
}

// UpfPolicyAddDelReply defines message 'upf_policy_add_del_reply'.
type UpfPolicyAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfPolicyAddDelReply) Reset()               { *m = UpfPolicyAddDelReply{} }
func (*UpfPolicyAddDelReply) GetMessageName() string { return "upf_policy_add_del_reply" }
func (*UpfPolicyAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfPolicyAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfPolicyAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfPolicyAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfPolicyAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfPolicyDetails defines message 'upf_policy_details'.
type UpfPolicyDetails struct {
	Identifier string              `binapi:"string[64],name=identifier" json:"identifier,omitempty"`
	NPaths     uint8               `binapi:"u8,name=n_paths" json:"-"`
	Paths      []fib_types.FibPath `binapi:"fib_path[n_paths],name=paths" json:"paths,omitempty"`
}

func (m *UpfPolicyDetails) Reset()               { *m = UpfPolicyDetails{} }
func (*UpfPolicyDetails) GetMessageName() string { return "upf_policy_details" }
func (*UpfPolicyDetails) GetCrcString() string   { return "8b4efe84" }
func (*UpfPolicyDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Identifier
	size += 1  // m.NPaths
	for j1 := 0; j1 < len(m.Paths); j1++ {
		var s1 fib_types.FibPath
		_ = s1
		if j1 < len(m.Paths) {
			s1 = m.Paths[j1]
		}
		size += 4      // s1.SwIfIndex
		size += 4      // s1.TableID
		size += 4      // s1.RpfID
		size += 1      // s1.Weight
		size += 1      // s1.Preference
		size += 4      // s1.Type
		size += 4      // s1.Flags
		size += 4      // s1.Proto
		size += 1 * 16 // s1.Nh.Address
		size += 4      // s1.Nh.ViaLabel
		size += 4      // s1.Nh.ObjID
		size += 4      // s1.Nh.ClassifyTableIndex
		size += 1      // s1.NLabels
		for j2 := 0; j2 < 16; j2++ {
			size += 1 // s1.LabelStack[j2].IsUniform
			size += 4 // s1.LabelStack[j2].Label
			size += 1 // s1.LabelStack[j2].TTL
			size += 1 // s1.LabelStack[j2].Exp
		}
	}
	return size
}
func (m *UpfPolicyDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Identifier, 64)
	buf.EncodeUint8(uint8(len(m.Paths)))
	for j0 := 0; j0 < len(m.Paths); j0++ {
		var v0 fib_types.FibPath // Paths
		if j0 < len(m.Paths) {
			v0 = m.Paths[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint32(v0.TableID)
		buf.EncodeUint32(v0.RpfID)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeUint8(v0.Preference)
		buf.EncodeUint32(uint32(v0.Type))
		buf.EncodeUint32(uint32(v0.Flags))
		buf.EncodeUint32(uint32(v0.Proto))
		buf.EncodeBytes(v0.Nh.Address.XXX_UnionData[:], 16)
		buf.EncodeUint32(v0.Nh.ViaLabel)
		buf.EncodeUint32(v0.Nh.ObjID)
		buf.EncodeUint32(v0.Nh.ClassifyTableIndex)
		buf.EncodeUint8(v0.NLabels)
		for j1 := 0; j1 < 16; j1++ {
			buf.EncodeUint8(v0.LabelStack[j1].IsUniform)
			buf.EncodeUint32(v0.LabelStack[j1].Label)
			buf.EncodeUint8(v0.LabelStack[j1].TTL)
			buf.EncodeUint8(v0.LabelStack[j1].Exp)
		}
	}
	return buf.Bytes(), nil
}
func (m *UpfPolicyDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Identifier = buf.DecodeString(64)
	m.NPaths = buf.DecodeUint8()
	m.Paths = make([]fib_types.FibPath, m.NPaths)
	for j0 := 0; j0 < len(m.Paths); j0++ {
		m.Paths[j0].SwIfIndex = buf.DecodeUint32()
		m.Paths[j0].TableID = buf.DecodeUint32()
		m.Paths[j0].RpfID = buf.DecodeUint32()
		m.Paths[j0].Weight = buf.DecodeUint8()
		m.Paths[j0].Preference = buf.DecodeUint8()
		m.Paths[j0].Type = fib_types.FibPathType(buf.DecodeUint32())
		m.Paths[j0].Flags = fib_types.FibPathFlags(buf.DecodeUint32())
		m.Paths[j0].Proto = fib_types.FibPathNhProto(buf.DecodeUint32())
		copy(m.Paths[j0].Nh.Address.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Paths[j0].Nh.ViaLabel = buf.DecodeUint32()
		m.Paths[j0].Nh.ObjID = buf.DecodeUint32()
		m.Paths[j0].Nh.ClassifyTableIndex = buf.DecodeUint32()
		m.Paths[j0].NLabels = buf.DecodeUint8()
		for j1 := 0; j1 < 16; j1++ {
			m.Paths[j0].LabelStack[j1].IsUniform = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Label = buf.DecodeUint32()
			m.Paths[j0].LabelStack[j1].TTL = buf.DecodeUint8()
			m.Paths[j0].LabelStack[j1].Exp = buf.DecodeUint8()
		}
	}
	return nil
}

// UpfPolicyDump defines message 'upf_policy_dump'.
type UpfPolicyDump struct{}

func (m *UpfPolicyDump) Reset()               { *m = UpfPolicyDump{} }
func (*UpfPolicyDump) GetMessageName() string { return "upf_policy_dump" }
func (*UpfPolicyDump) GetCrcString() string   { return "51077d14" }
func (*UpfPolicyDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfPolicyDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfPolicyDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfPolicyDump) Unmarshal(b []byte) error {
	return nil
}

// UpfSetNodeID defines message 'upf_set_node_id'.
type UpfSetNodeID struct {
	Type    uint8            `binapi:"u8,name=type" json:"type,omitempty"`
	IP      ip_types.Address `binapi:"address,name=ip" json:"ip,omitempty"`
	FqdnLen uint8            `binapi:"u8,name=fqdn_len" json:"-"`
	Fqdn    []byte           `binapi:"u8[fqdn_len],name=fqdn" json:"fqdn,omitempty"`
}

func (m *UpfSetNodeID) Reset()               { *m = UpfSetNodeID{} }
func (*UpfSetNodeID) GetMessageName() string { return "upf_set_node_id" }
func (*UpfSetNodeID) GetCrcString() string   { return "d2f43a0a" }
func (*UpfSetNodeID) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfSetNodeID) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1               // m.Type
	size += 1               // m.IP.Af
	size += 1 * 16          // m.IP.Un
	size += 1               // m.FqdnLen
	size += 1 * len(m.Fqdn) // m.Fqdn
	return size
}
func (m *UpfSetNodeID) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Type)
	buf.EncodeUint8(uint8(m.IP.Af))
	buf.EncodeBytes(m.IP.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(uint8(len(m.Fqdn)))
	buf.EncodeBytes(m.Fqdn, 0)
	return buf.Bytes(), nil
}
func (m *UpfSetNodeID) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Type = buf.DecodeUint8()
	m.IP.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.IP.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.FqdnLen = buf.DecodeUint8()
	m.Fqdn = make([]byte, m.FqdnLen)
	copy(m.Fqdn, buf.DecodeBytes(len(m.Fqdn)))
	return nil
}

// UpfSetNodeIDReply defines message 'upf_set_node_id_reply'.
type UpfSetNodeIDReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfSetNodeIDReply) Reset()               { *m = UpfSetNodeIDReply{} }
func (*UpfSetNodeIDReply) GetMessageName() string { return "upf_set_node_id_reply" }
func (*UpfSetNodeIDReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfSetNodeIDReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfSetNodeIDReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfSetNodeIDReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfSetNodeIDReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfTdfUlEnableDisable defines message 'upf_tdf_ul_enable_disable'.
type UpfTdfUlEnableDisable struct {
	Enable    bool                           `binapi:"bool,name=enable" json:"enable,omitempty"`
	Interface interface_types.InterfaceIndex `binapi:"interface_index,name=interface" json:"interface,omitempty"`
	IsIPv6    bool                           `binapi:"bool,name=is_ipv6" json:"is_ipv6,omitempty"`
}

func (m *UpfTdfUlEnableDisable) Reset()               { *m = UpfTdfUlEnableDisable{} }
func (*UpfTdfUlEnableDisable) GetMessageName() string { return "upf_tdf_ul_enable_disable" }
func (*UpfTdfUlEnableDisable) GetCrcString() string   { return "53c1a78f" }
func (*UpfTdfUlEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfTdfUlEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Enable
	size += 4 // m.Interface
	size += 1 // m.IsIPv6
	return size
}
func (m *UpfTdfUlEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.Enable)
	buf.EncodeUint32(uint32(m.Interface))
	buf.EncodeBool(m.IsIPv6)
	return buf.Bytes(), nil
}
func (m *UpfTdfUlEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Enable = buf.DecodeBool()
	m.Interface = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsIPv6 = buf.DecodeBool()
	return nil
}

// UpfTdfUlEnableDisableReply defines message 'upf_tdf_ul_enable_disable_reply'.
type UpfTdfUlEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfTdfUlEnableDisableReply) Reset()               { *m = UpfTdfUlEnableDisableReply{} }
func (*UpfTdfUlEnableDisableReply) GetMessageName() string { return "upf_tdf_ul_enable_disable_reply" }
func (*UpfTdfUlEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfTdfUlEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfTdfUlEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfTdfUlEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfTdfUlEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfTdfUlTable defines message 'upf_tdf_ul_table'.
type UpfTdfUlTable struct {
	IsIPv6 bool `binapi:"bool,name=is_ipv6" json:"is_ipv6,omitempty"`
}

func (m *UpfTdfUlTable) Reset()               { *m = UpfTdfUlTable{} }
func (*UpfTdfUlTable) GetMessageName() string { return "upf_tdf_ul_table" }
func (*UpfTdfUlTable) GetCrcString() string   { return "98d231ca" }
func (*UpfTdfUlTable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfTdfUlTable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsIPv6
	return size
}
func (m *UpfTdfUlTable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsIPv6)
	return buf.Bytes(), nil
}
func (m *UpfTdfUlTable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIPv6 = buf.DecodeBool()
	return nil
}

// UpfTdfUlTableAdd defines message 'upf_tdf_ul_table_add'.
type UpfTdfUlTableAdd struct {
	IsAdd            bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	IsIPv6           bool   `binapi:"bool,name=is_ipv6" json:"is_ipv6,omitempty"`
	TableID          uint32 `binapi:"u32,name=table_id" json:"table_id,omitempty"`
	SrcLookupTableID uint32 `binapi:"u32,name=src_lookup_table_id" json:"src_lookup_table_id,omitempty"`
}

func (m *UpfTdfUlTableAdd) Reset()               { *m = UpfTdfUlTableAdd{} }
func (*UpfTdfUlTableAdd) GetMessageName() string { return "upf_tdf_ul_table_add" }
func (*UpfTdfUlTableAdd) GetCrcString() string   { return "040a316b" }
func (*UpfTdfUlTableAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfTdfUlTableAdd) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 1 // m.IsIPv6
	size += 4 // m.TableID
	size += 4 // m.SrcLookupTableID
	return size
}
func (m *UpfTdfUlTableAdd) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeBool(m.IsIPv6)
	buf.EncodeUint32(m.TableID)
	buf.EncodeUint32(m.SrcLookupTableID)
	return buf.Bytes(), nil
}
func (m *UpfTdfUlTableAdd) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.IsIPv6 = buf.DecodeBool()
	m.TableID = buf.DecodeUint32()
	m.SrcLookupTableID = buf.DecodeUint32()
	return nil
}

// UpfTdfUlTableAddReply defines message 'upf_tdf_ul_table_add_reply'.
type UpfTdfUlTableAddReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfTdfUlTableAddReply) Reset()               { *m = UpfTdfUlTableAddReply{} }
func (*UpfTdfUlTableAddReply) GetMessageName() string { return "upf_tdf_ul_table_add_reply" }
func (*UpfTdfUlTableAddReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfTdfUlTableAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfTdfUlTableAddReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfTdfUlTableAddReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfTdfUlTableAddReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfTdfUlTableReply defines message 'upf_tdf_ul_table_reply'.
type UpfTdfUlTableReply struct {
	MappingsLen uint8    `binapi:"u8,name=mappings_len" json:"-"`
	Mappings    []uint32 `binapi:"u32[mappings_len],name=mappings" json:"mappings,omitempty"`
}

func (m *UpfTdfUlTableReply) Reset()               { *m = UpfTdfUlTableReply{} }
func (*UpfTdfUlTableReply) GetMessageName() string { return "upf_tdf_ul_table_reply" }
func (*UpfTdfUlTableReply) GetCrcString() string   { return "d1a9fc2e" }
func (*UpfTdfUlTableReply) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfTdfUlTableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1                   // m.MappingsLen
	size += 4 * len(m.Mappings) // m.Mappings
	return size
}
func (m *UpfTdfUlTableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(len(m.Mappings)))
	for i := 0; i < len(m.Mappings); i++ {
		var x uint32
		if i < len(m.Mappings) {
			x = uint32(m.Mappings[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *UpfTdfUlTableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.MappingsLen = buf.DecodeUint8()
	m.Mappings = make([]uint32, m.MappingsLen)
	for i := 0; i < len(m.Mappings); i++ {
		m.Mappings[i] = buf.DecodeUint32()
	}
	return nil
}

// UpfUeipPoolDetails defines message 'upf_ueip_pool_details'.
type UpfUeipPoolDetails struct {
	IdentityLen uint8  `binapi:"u8,name=identity_len" json:"identity_len,omitempty"`
	Identity    []byte `binapi:"u8[64],name=identity" json:"identity,omitempty"`
	NwiNameLen  uint8  `binapi:"u8,name=nwi_name_len" json:"-"`
	NwiName     []byte `binapi:"u8[nwi_name_len],name=nwi_name" json:"nwi_name,omitempty"`
}

func (m *UpfUeipPoolDetails) Reset()               { *m = UpfUeipPoolDetails{} }
func (*UpfUeipPoolDetails) GetMessageName() string { return "upf_ueip_pool_details" }
func (*UpfUeipPoolDetails) GetCrcString() string   { return "b4a36a1c" }
func (*UpfUeipPoolDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfUeipPoolDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1                  // m.IdentityLen
	size += 1 * 64             // m.Identity
	size += 1                  // m.NwiNameLen
	size += 1 * len(m.NwiName) // m.NwiName
	return size
}
func (m *UpfUeipPoolDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IdentityLen)
	buf.EncodeBytes(m.Identity, 64)
	buf.EncodeUint8(uint8(len(m.NwiName)))
	buf.EncodeBytes(m.NwiName, 0)
	return buf.Bytes(), nil
}
func (m *UpfUeipPoolDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IdentityLen = buf.DecodeUint8()
	m.Identity = make([]byte, 64)
	copy(m.Identity, buf.DecodeBytes(len(m.Identity)))
	m.NwiNameLen = buf.DecodeUint8()
	m.NwiName = make([]byte, m.NwiNameLen)
	copy(m.NwiName, buf.DecodeBytes(len(m.NwiName)))
	return nil
}

// UpfUeipPoolDump defines message 'upf_ueip_pool_dump'.
type UpfUeipPoolDump struct{}

func (m *UpfUeipPoolDump) Reset()               { *m = UpfUeipPoolDump{} }
func (*UpfUeipPoolDump) GetMessageName() string { return "upf_ueip_pool_dump" }
func (*UpfUeipPoolDump) GetCrcString() string   { return "51077d14" }
func (*UpfUeipPoolDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfUeipPoolDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *UpfUeipPoolDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *UpfUeipPoolDump) Unmarshal(b []byte) error {
	return nil
}

// UpfUeipPoolNwiAdd defines message 'upf_ueip_pool_nwi_add'.
type UpfUeipPoolNwiAdd struct {
	IsAdd       bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	IdentityLen uint8  `binapi:"u8,name=identity_len" json:"identity_len,omitempty"`
	Identity    []byte `binapi:"u8[64],name=identity" json:"identity,omitempty"`
	NwiNameLen  uint8  `binapi:"u8,name=nwi_name_len" json:"-"`
	NwiName     []byte `binapi:"u8[nwi_name_len],name=nwi_name" json:"nwi_name,omitempty"`
}

func (m *UpfUeipPoolNwiAdd) Reset()               { *m = UpfUeipPoolNwiAdd{} }
func (*UpfUeipPoolNwiAdd) GetMessageName() string { return "upf_ueip_pool_nwi_add" }
func (*UpfUeipPoolNwiAdd) GetCrcString() string   { return "31b44993" }
func (*UpfUeipPoolNwiAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfUeipPoolNwiAdd) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1                  // m.IsAdd
	size += 1                  // m.IdentityLen
	size += 1 * 64             // m.Identity
	size += 1                  // m.NwiNameLen
	size += 1 * len(m.NwiName) // m.NwiName
	return size
}
func (m *UpfUeipPoolNwiAdd) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(m.IdentityLen)
	buf.EncodeBytes(m.Identity, 64)
	buf.EncodeUint8(uint8(len(m.NwiName)))
	buf.EncodeBytes(m.NwiName, 0)
	return buf.Bytes(), nil
}
func (m *UpfUeipPoolNwiAdd) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.IdentityLen = buf.DecodeUint8()
	m.Identity = make([]byte, 64)
	copy(m.Identity, buf.DecodeBytes(len(m.Identity)))
	m.NwiNameLen = buf.DecodeUint8()
	m.NwiName = make([]byte, m.NwiNameLen)
	copy(m.NwiName, buf.DecodeBytes(len(m.NwiName)))
	return nil
}

// UpfUeipPoolNwiAddReply defines message 'upf_ueip_pool_nwi_add_reply'.
type UpfUeipPoolNwiAddReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfUeipPoolNwiAddReply) Reset()               { *m = UpfUeipPoolNwiAddReply{} }
func (*UpfUeipPoolNwiAddReply) GetMessageName() string { return "upf_ueip_pool_nwi_add_reply" }
func (*UpfUeipPoolNwiAddReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfUeipPoolNwiAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfUeipPoolNwiAddReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfUeipPoolNwiAddReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfUeipPoolNwiAddReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// UpfUpdateApp defines message 'upf_update_app'.
type UpfUpdateApp struct {
	App         []byte      `binapi:"u8[64],name=app" json:"app,omitempty"`
	L7RuleCount uint32      `binapi:"u32,name=l7_rule_count" json:"-"`
	L7Rules     []UpfL7Rule `binapi:"upf_l7_rule[l7_rule_count],name=l7_rules" json:"l7_rules,omitempty"`
}

func (m *UpfUpdateApp) Reset()               { *m = UpfUpdateApp{} }
func (*UpfUpdateApp) GetMessageName() string { return "upf_update_app" }
func (*UpfUpdateApp) GetCrcString() string   { return "50f53737" }
func (*UpfUpdateApp) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *UpfUpdateApp) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.App
	size += 4      // m.L7RuleCount
	for j1 := 0; j1 < len(m.L7Rules); j1++ {
		var s1 UpfL7Rule
		_ = s1
		if j1 < len(m.L7Rules) {
			s1 = m.L7Rules[j1]
		}
		size += 4                 // s1.ID
		size += 4                 // s1.RegexLength
		size += 1 * len(s1.Regex) // s1.Regex
	}
	return size
}
func (m *UpfUpdateApp) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.App, 64)
	buf.EncodeUint32(uint32(len(m.L7Rules)))
	for j0 := 0; j0 < len(m.L7Rules); j0++ {
		var v0 UpfL7Rule // L7Rules
		if j0 < len(m.L7Rules) {
			v0 = m.L7Rules[j0]
		}
		buf.EncodeUint32(v0.ID)
		buf.EncodeUint32(uint32(len(v0.Regex)))
		buf.EncodeBytes(v0.Regex, 0)
	}
	return buf.Bytes(), nil
}
func (m *UpfUpdateApp) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.App = make([]byte, 64)
	copy(m.App, buf.DecodeBytes(len(m.App)))
	m.L7RuleCount = buf.DecodeUint32()
	m.L7Rules = make([]UpfL7Rule, m.L7RuleCount)
	for j0 := 0; j0 < len(m.L7Rules); j0++ {
		m.L7Rules[j0].ID = buf.DecodeUint32()
		m.L7Rules[j0].RegexLength = buf.DecodeUint32()
		m.L7Rules[j0].Regex = make([]byte, m.L7Rules[j0].RegexLength)
		copy(m.L7Rules[j0].Regex, buf.DecodeBytes(len(m.L7Rules[j0].Regex)))
	}
	return nil
}

// UpfUpdateAppReply defines message 'upf_update_app_reply'.
type UpfUpdateAppReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *UpfUpdateAppReply) Reset()               { *m = UpfUpdateAppReply{} }
func (*UpfUpdateAppReply) GetMessageName() string { return "upf_update_app_reply" }
func (*UpfUpdateAppReply) GetCrcString() string   { return "e8d4e804" }
func (*UpfUpdateAppReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *UpfUpdateAppReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *UpfUpdateAppReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *UpfUpdateAppReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_upf_binapi_init() }
func file_upf_binapi_init() {
	api.RegisterMessage((*UpfAppAddDel)(nil), "upf_app_add_del_e68f6ec0")
	api.RegisterMessage((*UpfAppAddDelReply)(nil), "upf_app_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfAppFlowTimeoutSet)(nil), "upf_app_flow_timeout_set_2dac8f63")
	api.RegisterMessage((*UpfAppFlowTimeoutSetReply)(nil), "upf_app_flow_timeout_set_reply_e8d4e804")
	api.RegisterMessage((*UpfAppIPRuleAddDel)(nil), "upf_app_ip_rule_add_del_27e463e8")
	api.RegisterMessage((*UpfAppIPRuleAddDelReply)(nil), "upf_app_ip_rule_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfAppL7RuleAddDel)(nil), "upf_app_l7_rule_add_del_5efde0a7")
	api.RegisterMessage((*UpfAppL7RuleAddDelReply)(nil), "upf_app_l7_rule_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfApplicationL7RuleDetails)(nil), "upf_application_l7_rule_details_5df24e1f")
	api.RegisterMessage((*UpfApplicationL7RuleDump)(nil), "upf_application_l7_rule_dump_0b99fe11")
	api.RegisterMessage((*UpfApplicationsDetails)(nil), "upf_applications_details_72cd4b5d")
	api.RegisterMessage((*UpfApplicationsDump)(nil), "upf_applications_dump_51077d14")
	api.RegisterMessage((*UpfGetNodeID)(nil), "upf_get_node_id_51077d14")
	api.RegisterMessage((*UpfGetNodeIDReply)(nil), "upf_get_node_id_reply_4f226741")
	api.RegisterMessage((*UpfNatPoolAdd)(nil), "upf_nat_pool_add_53c81402")
	api.RegisterMessage((*UpfNatPoolAddReply)(nil), "upf_nat_pool_add_reply_e8d4e804")
	api.RegisterMessage((*UpfNatPoolDetails)(nil), "upf_nat_pool_details_536a8c46")
	api.RegisterMessage((*UpfNatPoolDump)(nil), "upf_nat_pool_dump_51077d14")
	api.RegisterMessage((*UpfNwiAddDel)(nil), "upf_nwi_add_del_07485c64")
	api.RegisterMessage((*UpfNwiAddDelReply)(nil), "upf_nwi_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfNwiDetails)(nil), "upf_nwi_details_31319001")
	api.RegisterMessage((*UpfNwiDump)(nil), "upf_nwi_dump_51077d14")
	api.RegisterMessage((*UpfPfcpEndpointAddDel)(nil), "upf_pfcp_endpoint_add_del_c10b6079")
	api.RegisterMessage((*UpfPfcpEndpointAddDelReply)(nil), "upf_pfcp_endpoint_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfPfcpEndpointDetails)(nil), "upf_pfcp_endpoint_details_84b7ba70")
	api.RegisterMessage((*UpfPfcpEndpointDump)(nil), "upf_pfcp_endpoint_dump_51077d14")
	api.RegisterMessage((*UpfPfcpFormat)(nil), "upf_pfcp_format_d522d6e1")
	api.RegisterMessage((*UpfPfcpFormatReply)(nil), "upf_pfcp_format_reply_8706f872")
	api.RegisterMessage((*UpfPfcpHeartbeatsGet)(nil), "upf_pfcp_heartbeats_get_51077d14")
	api.RegisterMessage((*UpfPfcpHeartbeatsGetReply)(nil), "upf_pfcp_heartbeats_get_reply_f5eafa3d")
	api.RegisterMessage((*UpfPfcpHeartbeatsSet)(nil), "upf_pfcp_heartbeats_set_f5eafa3d")
	api.RegisterMessage((*UpfPfcpHeartbeatsSetReply)(nil), "upf_pfcp_heartbeats_set_reply_e8d4e804")
	api.RegisterMessage((*UpfPfcpPolicerSet)(nil), "upf_pfcp_policer_set_8d0512f3")
	api.RegisterMessage((*UpfPfcpPolicerSetReply)(nil), "upf_pfcp_policer_set_reply_e8d4e804")
	api.RegisterMessage((*UpfPfcpPolicerShow)(nil), "upf_pfcp_policer_show_51077d14")
	api.RegisterMessage((*UpfPfcpPolicerShowReply)(nil), "upf_pfcp_policer_show_reply_8d0512f3")
	api.RegisterMessage((*UpfPfcpReencode)(nil), "upf_pfcp_reencode_d522d6e1")
	api.RegisterMessage((*UpfPfcpReencodeReply)(nil), "upf_pfcp_reencode_reply_68800422")
	api.RegisterMessage((*UpfPfcpServerSet)(nil), "upf_pfcp_server_set_747f398b")
	api.RegisterMessage((*UpfPfcpServerSetReply)(nil), "upf_pfcp_server_set_reply_e8d4e804")
	api.RegisterMessage((*UpfPfcpServerShow)(nil), "upf_pfcp_server_show_51077d14")
	api.RegisterMessage((*UpfPfcpServerShowReply)(nil), "upf_pfcp_server_show_reply_747f398b")
	api.RegisterMessage((*UpfPolicyAddDel)(nil), "upf_policy_add_del_b84d515c")
	api.RegisterMessage((*UpfPolicyAddDelReply)(nil), "upf_policy_add_del_reply_e8d4e804")
	api.RegisterMessage((*UpfPolicyDetails)(nil), "upf_policy_details_8b4efe84")
	api.RegisterMessage((*UpfPolicyDump)(nil), "upf_policy_dump_51077d14")
	api.RegisterMessage((*UpfSetNodeID)(nil), "upf_set_node_id_d2f43a0a")
	api.RegisterMessage((*UpfSetNodeIDReply)(nil), "upf_set_node_id_reply_e8d4e804")
	api.RegisterMessage((*UpfTdfUlEnableDisable)(nil), "upf_tdf_ul_enable_disable_53c1a78f")
	api.RegisterMessage((*UpfTdfUlEnableDisableReply)(nil), "upf_tdf_ul_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*UpfTdfUlTable)(nil), "upf_tdf_ul_table_98d231ca")
	api.RegisterMessage((*UpfTdfUlTableAdd)(nil), "upf_tdf_ul_table_add_040a316b")
	api.RegisterMessage((*UpfTdfUlTableAddReply)(nil), "upf_tdf_ul_table_add_reply_e8d4e804")
	api.RegisterMessage((*UpfTdfUlTableReply)(nil), "upf_tdf_ul_table_reply_d1a9fc2e")
	api.RegisterMessage((*UpfUeipPoolDetails)(nil), "upf_ueip_pool_details_b4a36a1c")
	api.RegisterMessage((*UpfUeipPoolDump)(nil), "upf_ueip_pool_dump_51077d14")
	api.RegisterMessage((*UpfUeipPoolNwiAdd)(nil), "upf_ueip_pool_nwi_add_31b44993")
	api.RegisterMessage((*UpfUeipPoolNwiAddReply)(nil), "upf_ueip_pool_nwi_add_reply_e8d4e804")
	api.RegisterMessage((*UpfUpdateApp)(nil), "upf_update_app_50f53737")
	api.RegisterMessage((*UpfUpdateAppReply)(nil), "upf_update_app_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*UpfAppAddDel)(nil),
		(*UpfAppAddDelReply)(nil),
		(*UpfAppFlowTimeoutSet)(nil),
		(*UpfAppFlowTimeoutSetReply)(nil),
		(*UpfAppIPRuleAddDel)(nil),
		(*UpfAppIPRuleAddDelReply)(nil),
		(*UpfAppL7RuleAddDel)(nil),
		(*UpfAppL7RuleAddDelReply)(nil),
		(*UpfApplicationL7RuleDetails)(nil),
		(*UpfApplicationL7RuleDump)(nil),
		(*UpfApplicationsDetails)(nil),
		(*UpfApplicationsDump)(nil),
		(*UpfGetNodeID)(nil),
		(*UpfGetNodeIDReply)(nil),
		(*UpfNatPoolAdd)(nil),
		(*UpfNatPoolAddReply)(nil),
		(*UpfNatPoolDetails)(nil),
		(*UpfNatPoolDump)(nil),
		(*UpfNwiAddDel)(nil),
		(*UpfNwiAddDelReply)(nil),
		(*UpfNwiDetails)(nil),
		(*UpfNwiDump)(nil),
		(*UpfPfcpEndpointAddDel)(nil),
		(*UpfPfcpEndpointAddDelReply)(nil),
		(*UpfPfcpEndpointDetails)(nil),
		(*UpfPfcpEndpointDump)(nil),
		(*UpfPfcpFormat)(nil),
		(*UpfPfcpFormatReply)(nil),
		(*UpfPfcpHeartbeatsGet)(nil),
		(*UpfPfcpHeartbeatsGetReply)(nil),
		(*UpfPfcpHeartbeatsSet)(nil),
		(*UpfPfcpHeartbeatsSetReply)(nil),
		(*UpfPfcpPolicerSet)(nil),
		(*UpfPfcpPolicerSetReply)(nil),
		(*UpfPfcpPolicerShow)(nil),
		(*UpfPfcpPolicerShowReply)(nil),
		(*UpfPfcpReencode)(nil),
		(*UpfPfcpReencodeReply)(nil),
		(*UpfPfcpServerSet)(nil),
		(*UpfPfcpServerSetReply)(nil),
		(*UpfPfcpServerShow)(nil),
		(*UpfPfcpServerShowReply)(nil),
		(*UpfPolicyAddDel)(nil),
		(*UpfPolicyAddDelReply)(nil),
		(*UpfPolicyDetails)(nil),
		(*UpfPolicyDump)(nil),
		(*UpfSetNodeID)(nil),
		(*UpfSetNodeIDReply)(nil),
		(*UpfTdfUlEnableDisable)(nil),
		(*UpfTdfUlEnableDisableReply)(nil),
		(*UpfTdfUlTable)(nil),
		(*UpfTdfUlTableAdd)(nil),
		(*UpfTdfUlTableAddReply)(nil),
		(*UpfTdfUlTableReply)(nil),
		(*UpfUeipPoolDetails)(nil),
		(*UpfUeipPoolDump)(nil),
		(*UpfUeipPoolNwiAdd)(nil),
		(*UpfUeipPoolNwiAddReply)(nil),
		(*UpfUpdateApp)(nil),
		(*UpfUpdateAppReply)(nil),
	}
}
