/*
 * Copyright (c) 2019 Travelping GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "2.0.0";
import "vnet/interface_types.api";
import "vnet/ip/ip_types.api";
import "vnet/fib/fib_types.api";

enum upf_ipfix_which_flags : u8
{
  UPF_IPFIX_WHICH_FLAG_IP4 = 0x1,
  UPF_IPFIX_WHICH_FLAG_IP6 = 0x2,
};

enum upf_ipfix_record_flags : u8
{
  UPF_IPFIX_RECORD_FLAG_L3 = 0x1,
  UPF_IPFIX_RECORD_FLAG_L4 = 0x2,
};

/** \brief Add/delete TDF application
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param name - TDF application name
    @param flags - TBD
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_add_del {
  u32 client_index;
  u32 context;
  u8 name[64];
  u32 flags;
  bool is_add;
};

/** \brief Add/delete TDF application IP rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param app - TDF application name
    @param id - Rule identifier
    @param src - IP source prefix
    @param src - IP destination prefix
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_ip_rule_add_del {
  u32 client_index;
  u32 context;
  u8 app[64];
  u32 id;
  vl_api_prefix_t src;
  vl_api_prefix_t dst;
  u8 is_add;
};

/** \brief Add/delete TDF application Layer 7 rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param app - TDF application name
    @param id - Rule identifier
    @param regex - Layer 7 detection regular expression
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_l7_rule_add_del {
  u32 client_index;
  u32 context;
  u8 app[64];
  u32 id;
  u8 regex[1024];
  bool is_add;
};

/** \brief Add/delete TDF application Layer 7 rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param type
    @param default_value
*/
autoreply define upf_app_flow_timeout_set {
  u32 client_index;
  u32 context;
  u8 type;
  u16 default_value;
};

/* TODO: use this struct for adding and dumping the rules */
typedef upf_l7_rule
{
  u32 id;
  u32 regex_length;
  u8 regex[regex_length];
};

autoreply define upf_update_app {
  u32 client_index;
  u32 context;

  u8 app[64];
  u32 l7_rule_count;
  vl_api_upf_l7_rule_t l7_rules[l7_rule_count];
};

/*
  NOTE: details must go before corresponding _dump,
  or we'll be gettings errors like:

  vl_socket_api_send:133: id out of range: 1301
*/

define upf_applications_details {
  u32 context;

  u8 name[64];
  u32 flags;
};

define upf_applications_dump {
  u32 client_index;
  u32 context;
};

/* TODO: API calls for the IP rules aren't implemented yet */
/*
define upf_application_ip_rule_details {
  u32 context;
  u32 id;

  vl_api_prefix_t src;
  vl_api_prefix_t dst;
};

define upf_application_ip_rule_dump {
  u32 client_index;
  u32 context;

  u8 app[64];
};
*/

define upf_application_l7_rule_details {
  u32 context;

  u32 id;
  u8 regex[1024];
};

define upf_application_l7_rule_dump {
  u32 client_index;
  u32 context;

  u8 app[64];
};

define upf_pfcp_reencode {
  u32 client_index;
  u32 context;
  u32 packet_len;
  u8 packet[packet_len];
};

define upf_pfcp_reencode_reply {
  u32 context;
  i32 retval;
  u32 packet_len;
  u8 packet[packet_len];
};

define upf_pfcp_format {
  u32 client_index;
  u32 context;
  u32 packet_len;
  u8 packet[packet_len];
};

define upf_pfcp_format_reply {
  u32 context;
  i32 retval;
  u32 text_len;
  u8 text[text_len];
};

define upf_nat_pool_details {
  u32 context;

  u8 name[64];
  u16 block_size;
  u32 max_users;
  u32 current_users;
  u8 nwi_len;
  u8 nwi[nwi_len];
};

define upf_nat_pool_dump {
  u32 client_index;
  u32 context;
};

autoreply define upf_policy_add_del {
  u32 client_index;
  u32 context;
  u8 action;
  string identifier[64];
  u8 n_paths;
  vl_api_fib_path_t paths[n_paths];
};

define upf_policy_details {
  u32 client_index;
  u32 context;
  string identifier[64];
  u8 n_paths;
  vl_api_fib_path_t paths[n_paths];
};

define upf_policy_dump {
  u32 client_index;
  u32 context;
};

autoreply define upf_nwi_add_del {
  u32 client_index;
  u32 context;
  u8 add;
  u32 ip4_table_id;
  u32 ip6_table_id;
  u8 ipfix_policy[64];
  vl_api_address_t ipfix_collector_ip;
  u32 ipfix_report_interval;
  u32 observation_domain_id;
  u8 observation_domain_name[256];
  u64 observation_point_id;
  u8 nwi_len;
  u8 nwi[nwi_len];
};

define upf_nwi_details {
  u32 client_index;
  u32 context;
  u32 ip4_table_id;
  u32 ip6_table_id;
  u8 ipfix_policy[64];
  vl_api_address_t ipfix_collector_ip;
  u32 ipfix_report_interval;
  u32 observation_domain_id;
  u8 observation_domain_name[256];
  u64 observation_point_id;
  u8 nwi_len;
  u8 nwi[nwi_len];
};

define upf_nwi_dump {
  u32 client_index;
  u32 context;
};

autoreply define upf_pfcp_endpoint_add_del {
  u32 client_index;
  u32 context;
  u8 is_add;
  u32 table_id;
  vl_api_address_t ip;
};

define upf_pfcp_endpoint_details {
  u32 client_index;
  u32 context;
  u32 table_id;
  vl_api_address_t ip;
};

define upf_pfcp_endpoint_dump {
  u32 client_index;
  u32 context;
};

autoreply define upf_pfcp_server_set {
  u32 client_index;
  u32 context;
  u32 fifo_size;  /* in KB */
  u32 prealloc_fifos;
  u32 segment_size; /* in MB */
};

define upf_pfcp_server_show {
  u32 client_index;
  u32 context;
};

define upf_pfcp_server_show_reply {
  u32 client_index;
  u32 context;
  u32 fifo_size;  /* in KB */
  u32 prealloc_fifos;
  u32 segment_size; /* in MB */
};

autoreply define upf_pfcp_policer_set {
  u32 client_index;
  u32 context;
  u32 cir_pps;
  u32 cb_ms;
};

define upf_pfcp_policer_show {
  u32 client_index;
  u32 context;
};

define upf_pfcp_policer_show_reply {
  u32 client_index;
  u32 context;
  u32 cir_pps;
  u32 cb_ms;
};
