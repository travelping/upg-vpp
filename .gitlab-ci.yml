stages:
- prepare
- build
- test

variables:
  REGISTRY: "quay.io"
  IMAGE_NAME: travelping/upg-vpp
  # this points to buildkitd k8s service
  BUILDKITD_ADDR: tcp://buildkitd:1234
  # This is needed to disable TLS in recent docker:...dind images.
  # TLS there is not really needed as docker client connects
  # to localhost, and all of the docker certs only cause problems
  # here
  DOCKER_TLS_CERTDIR: ""
  # Make 'git am' work
  GIT_AUTHOR_NAME: Dummy
  GIT_AUTHOR_EMAIL: dummy@example.com
  GIT_COMMITTER_NAME: Dummy
  GIT_COMMITTER_EMAIL: dummy@example.com

# prepare build image
prepare:
  stage: prepare
  # image: moby/buildkit:v0.7.1@sha256:530396a0ef93eacc025dadeb6a8a69d8c87ca402f48df9bc7c8c767b46fe9cf3
  image: docker:git
  services:
  - docker:19.03.8-dind
  script:
  - export DOCKER_HOST="tcp://localhost:2375"
  - echo "quay.io login..."
  - docker login -u ${QUAY_USER_ID} -p ${QUAY_TOKEN} ${REGISTRY}
  - echo "Ensuring that proper build image exists ..."
  # we don't use 'make' here b/c dind image doesn't have it
  # and it's not strictly required
  - sh hack/update-vpp.sh
  - PUSH_BUILD_IMAGE=1 sh hack/ensure-build-image.sh
  # FIXME: push from buildkit to quay.io fails with '401 UNAUTHORIZED'
  # for some reason, and it only happens with build images
  # - echo "registry login..."
  # # 'docker' command not available in the buildkit image
  # - >
  #   REGISTRY_LOGIN=${QUAY_USER_ID}
  #   REGISTRY_PASSWORD=${QUAY_TOKEN}
  #   hack/registry-login.sh "${REGISTRY}"
  # - echo "Ensuring that proper build image exists ..."
  # - USE_BUILDCTL=1 PUSH_BUILD_IMAGE=1 sh hack/ensure-build-image.sh
  only:
    changes:
    - .gitlab-ci.yml
    - Makefile
    - Dockerfile.build
    - build/external/**/*

# build container image
.build:
  stage: build
  image: quay.io/travelping/upg-build:c0e8ed0e5ab1e1160f104c77fc4b5654 # XX_DO_NOT_REMOVE_THIS_COMMENT
  script:
  - |
    export REGISTRY_LOGIN=${QUAY_USER_ID}
    export REGISTRY_PASSWORD=${QUAY_TOKEN}
    make ci-build
  - mv /tmp/_out "${CI_BUILD_NAME##*:}"
  dependencies:
  - prepare

# build container image
build:release:
  extends: .build
  variables:
    DOCKERFILE: Dockerfile
  artifacts:
    when: always
    untracked: true
    paths:
    - release/debs
    - release/testfiles.tar.gz

build:debug:
  extends: .build
  variables:
    DOCKERFILE: Dockerfile.devel
  artifacts:
    when: always
    untracked: true
    paths:
    - debug/debs
    - debug/testfiles.tar.gz

.test:
  stage: test
  # the following is updated automatically by make update-build-image-tag
  image: quay.io/travelping/upg-build:c0e8ed0e5ab1e1160f104c77fc4b5654 # XX_DO_NOT_REMOVE_THIS_COMMENT
  script:
  - make update-vpp
  - tar -C vpp -xvzf ${TEST_ARCHIVE}
  # temporary workaround for the hugepages issue
  - sysctl vm.nr_hugepages=0
  - mkdir test-out
  - export LC_ALL=C.UTF-8
  - export LANG=C.UTF-8
  - |
    if ! make -C vpp -j8 ${TEST_TARGET} TEST=test_upf V=1; then
      tar -C /tmp -cvzf test-out/vpp-test.tar.gz . || true
      ls -l test-out/
      exit 1
    fi
  artifacts:
    when: on_failure
    paths:
    - test-out

test:patch-style:
  stage: test
  # the following is updated automatically by make update-build-image-tag
  image: quay.io/travelping/upg-build:c0e8ed0e5ab1e1160f104c77fc4b5654 # XX_DO_NOT_REMOVE_THIS_COMMENT
  script:
  - hack/checkstyle.sh

test:debug:
  extends: .test
  variables:
    TEST_ARCHIVE: debug/testfiles.tar.gz
    TEST_TARGET: retest-debug
  dependencies:
  - build:debug

test:release:
  extends: .test
  variables:
    TEST_ARCHIVE: release/testfiles.tar.gz
    TEST_TARGET: retest
  dependencies:
  - build:release

.test-e2e:
  stage: test
  variables:
    SKIP_VPP_SOURCE_CHECK: "y"
  # the following is updated automatically by make update-build-image-tag
  image: quay.io/travelping/upg-build:c0e8ed0e5ab1e1160f104c77fc4b5654 # XX_DO_NOT_REMOVE_THIS_COMMENT
  script:
  - tar -C vpp -xvzf ${TEST_ARCHIVE}
  - sysctl vm.nr_hugepages=0
  - mkdir artifacts junit-output
  # TODO: nightly run without E2E_QUICK
  # TODO: get rid of E2E_FLAKE_ATTEMPTS. The tests need to be less flaky.
  - |
    if ! make ${TEST_TARGET} E2E_RETEST=y E2E_ARTIFACTS_DIR=$PWD/artifacts E2E_JUNIT_DIR=$PWD/junit-output E2E_PARALLEL=y E2E_PARALLEL_NODES=8 E2E_QUICK=y; then
      mkdir test-out
      tar -cvzf test-out/vpp-test.tar.gz artifacts || true
      ls -l test-out/
      exit 1
    fi
  artifacts:
    when: always
    paths:
    - test-out
    reports:
      junit: junit-output/*.xml

test-e2e:debug:
  extends: .test-e2e
  variables:
    TEST_ARCHIVE: debug/testfiles.tar.gz
    TEST_TARGET: e2e-debug

test-e2e:release:
  extends: .test-e2e
  variables:
    TEST_ARCHIVE: release/testfiles.tar.gz
    TEST_TARGET: e2e-release
